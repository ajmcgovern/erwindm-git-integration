
CREATE TABLE AdventureWorksDWBuildVersion
( 
	DBVersion            nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	VersionDate          datetime  NULL 
)
go

CREATE TABLE DimAccount
( 
	AccountKey           int  IDENTITY ( 1,1 )  NOT NULL ,
	ParentAccountKey     int  NULL ,
	AccountCodeAlternateKey int  NULL ,
	ParentAccountCodeAlternateKey int  NULL ,
	AccountDescription   nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	AccountType          nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	Operator             nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	CustomMembers        nvarchar(300) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	ValueType            nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	CustomMemberOptions  nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL 
)
go

CREATE TABLE DimCurrency
( 
	CurrencyKey          int  IDENTITY ( 1,1 )  NOT NULL ,
	CurrencyAlternateKey nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	CurrencyName         nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL 
)
go

CREATE TABLE DimCustomer
( 
	CustomerKey          int  IDENTITY ( 1,1 )  NOT NULL ,
	GeographyKey         int  NULL ,
	CustomerAlternateKey nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	Title                nvarchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	FirstName            nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	MiddleName           nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	LastName             nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	NameStyle            bit  NULL ,
	BirthDate            date  NULL ,
	MaritalStatus        nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	Suffix               nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	Gender               nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	EmailAddress         nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	YearlyIncome         money  NULL ,
	TotalChildren        tinyint  NULL ,
	NumberChildrenAtHome tinyint  NULL ,
	EnglishEducation     nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	SpanishEducation     nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	FrenchEducation      nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	EnglishOccupation    nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	SpanishOccupation    nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	FrenchOccupation     nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	HouseOwnerFlag       nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	NumberCarsOwned      tinyint  NULL ,
	AddressLine1         nvarchar(120) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	AddressLine2         nvarchar(120) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	Phone                nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	DateFirstPurchase    date  NULL ,
	CommuteDistance      nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL 
)
go

CREATE TABLE DimDate
( 
	DateKey              int  NOT NULL ,
	FullDateAlternateKey date  NOT NULL ,
	DayNumberOfWeek      tinyint  NOT NULL ,
	EnglishDayNameOfWeek nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	SpanishDayNameOfWeek nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	FrenchDayNameOfWeek  nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	DayNumberOfMonth     tinyint  NOT NULL ,
	DayNumberOfYear      smallint  NOT NULL ,
	WeekNumberOfYear     tinyint  NOT NULL ,
	EnglishMonthName     nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	SpanishMonthName     nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	FrenchMonthName      nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	MonthNumberOfYear    tinyint  NOT NULL ,
	CalendarQuarter      tinyint  NOT NULL ,
	CalendarYear         smallint  NOT NULL ,
	CalendarSemester     tinyint  NOT NULL ,
	FiscalQuarter        tinyint  NOT NULL ,
	FiscalYear           smallint  NOT NULL ,
	FiscalSemester       tinyint  NOT NULL 
)
go

CREATE TABLE DimDepartmentGroup
( 
	DepartmentGroupKey   int  IDENTITY ( 1,1 )  NOT NULL ,
	ParentDepartmentGroupKey int  NULL ,
	DepartmentGroupName  nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL 
)
go

CREATE TABLE DimEmployee
( 
	EmployeeKey          int  IDENTITY ( 1,1 )  NOT NULL ,
	ParentEmployeeKey    int  NULL ,
	EmployeeNationalIDAlternateKey nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	ParentEmployeeNationalIDAlternateKey nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	SalesTerritoryKey    int  NULL ,
	FirstName            nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	LastName             nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	MiddleName           nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	NameStyle            bit  NOT NULL ,
	Title                nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	HireDate             date  NULL ,
	BirthDate            date  NULL ,
	LoginID              nvarchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	EmailAddress         nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	Phone                nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	MaritalStatus        nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	EmergencyContactName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	EmergencyContactPhone nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	SalariedFlag         bit  NULL ,
	Gender               nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	PayFrequency         tinyint  NULL ,
	BaseRate             money  NULL ,
	VacationHours        smallint  NULL ,
	SickLeaveHours       smallint  NULL ,
	CurrentFlag          bit  NOT NULL ,
	SalesPersonFlag      bit  NOT NULL ,
	DepartmentName       nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	StartDate            date  NULL ,
	EndDate              date  NULL ,
	Status               nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	EmployeePhoto        varbinary(max)  NULL 
)
go

CREATE TABLE DimGeography
( 
	GeographyKey         int  IDENTITY ( 1,1 )  NOT NULL ,
	City                 nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	StateProvinceCode    nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	StateProvinceName    nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	CountryRegionCode    nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	EnglishCountryRegionName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	SpanishCountryRegionName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	FrenchCountryRegionName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	PostalCode           nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	SalesTerritoryKey    int  NULL ,
	IpAddressLocator     nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL 
)
go

CREATE TABLE DimOrganization
( 
	OrganizationKey      int  IDENTITY ( 1,1 )  NOT NULL ,
	ParentOrganizationKey int  NULL ,
	PercentageOfOwnership nvarchar(16) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	OrganizationName     nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	CurrencyKey          int  NULL 
)
go

CREATE TABLE DimProduct
( 
	ProductKey           int  IDENTITY ( 1,1 )  NOT NULL ,
	ProductAlternateKey  nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	ProductSubcategoryKey int  NULL ,
	WeightUnitMeasureCode nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	SizeUnitMeasureCode  nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	EnglishProductName   nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	SpanishProductName   nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	FrenchProductName    nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	StandardCost         money  NULL ,
	FinishedGoodsFlag    bit  NOT NULL ,
	Color                nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	SafetyStockLevel     smallint  NULL ,
	ReorderPoint         smallint  NULL ,
	ListPrice            money  NULL ,
	Size                 nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	SizeRange            nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	Weight               float(15)  NULL ,
	DaysToManufacture    int  NULL ,
	ProductLine          nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	DealerPrice          money  NULL ,
	Class                nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	Style                nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	ModelName            nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	LargePhoto           varbinary(max)  NULL ,
	EnglishDescription   nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	FrenchDescription    nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	ChineseDescription   nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	ArabicDescription    nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	HebrewDescription    nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	ThaiDescription      nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	GermanDescription    nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	JapaneseDescription  nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	TurkishDescription   nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	StartDate            datetime  NULL ,
	EndDate              datetime  NULL ,
	Status               nvarchar(7) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL 
)
go

CREATE TABLE DimProductCategory
( 
	ProductCategoryKey   int  IDENTITY ( 1,1 )  NOT NULL ,
	ProductCategoryAlternateKey int  NULL ,
	EnglishProductCategoryName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	SpanishProductCategoryName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	FrenchProductCategoryName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL 
)
go

CREATE TABLE DimProductSubcategory
( 
	ProductSubcategoryKey int  IDENTITY ( 1,1 )  NOT NULL ,
	ProductSubcategoryAlternateKey int  NULL ,
	EnglishProductSubcategoryName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	SpanishProductSubcategoryName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	FrenchProductSubcategoryName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	ProductCategoryKey   int  NULL 
)
go

CREATE TABLE DimPromotion
( 
	PromotionKey         int  IDENTITY ( 1,1 )  NOT NULL ,
	PromotionAlternateKey int  NULL ,
	EnglishPromotionName nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	SpanishPromotionName nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	FrenchPromotionName  nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	DiscountPct          float(15)  NULL ,
	EnglishPromotionType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	SpanishPromotionType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	FrenchPromotionType  nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	EnglishPromotionCategory nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	SpanishPromotionCategory nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	FrenchPromotionCategory nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	StartDate            datetime  NOT NULL ,
	EndDate              datetime  NULL ,
	MinQty               int  NULL ,
	MaxQty               int  NULL 
)
go

CREATE TABLE DimReseller
( 
	ResellerKey          int  IDENTITY ( 1,1 )  NOT NULL ,
	GeographyKey         int  NULL ,
	ResellerAlternateKey nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	Phone                nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	BusinessType         varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	ResellerName         nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	NumberEmployees      int  NULL ,
	OrderFrequency       char(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	OrderMonth           tinyint  NULL ,
	FirstOrderYear       int  NULL ,
	LastOrderYear        int  NULL ,
	ProductLine          nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	AddressLine1         nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	AddressLine2         nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	AnnualSales          money  NULL ,
	BankName             nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	MinPaymentType       tinyint  NULL ,
	MinPaymentAmount     money  NULL ,
	AnnualRevenue        money  NULL ,
	YearOpened           int  NULL 
)
go

CREATE TABLE DimSalesReason
( 
	SalesReasonKey       int  IDENTITY ( 1,1 )  NOT NULL ,
	SalesReasonAlternateKey int  NOT NULL ,
	SalesReasonName      nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	SalesReasonReasonType nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL 
)
go

CREATE TABLE DimSalesTerritory
( 
	SalesTerritoryKey    int  IDENTITY ( 1,1 )  NOT NULL ,
	SalesTerritoryAlternateKey int  NULL ,
	SalesTerritoryRegion nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	SalesTerritoryCountry nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	SalesTerritoryGroup  nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	SalesTerritoryImage  varbinary(max)  NULL 
)
go

CREATE TABLE DimScenario
( 
	ScenarioKey          int  IDENTITY ( 1,1 )  NOT NULL ,
	ScenarioName         nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL 
)
go

CREATE TABLE FactCallCenter
( 
	FactCallCenterID     int  IDENTITY ( 1,1 )  NOT NULL ,
	DateKey              int  NOT NULL ,
	WageType             nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	Shift                nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	LevelOneOperators    smallint  NOT NULL ,
	LevelTwoOperators    smallint  NOT NULL ,
	TotalOperators       smallint  NOT NULL ,
	Calls                int  NOT NULL ,
	AutomaticResponses   int  NOT NULL ,
	Orders               int  NOT NULL ,
	IssuesRaised         smallint  NOT NULL ,
	AverageTimePerIssue  smallint  NOT NULL ,
	ServiceGrade         float(15)  NOT NULL ,
	Date                 datetime  NULL 
)
go

CREATE TABLE FactCurrencyRate
( 
	CurrencyKey          int  NOT NULL ,
	DateKey              int  NOT NULL ,
	AverageRate          float(15)  NOT NULL ,
	EndOfDayRate         float(15)  NOT NULL ,
	Date                 datetime  NULL 
)
go

CREATE TABLE FactFinance
( 
	FinanceKey           int  IDENTITY ( 1,1 )  NOT NULL ,
	DateKey              int  NOT NULL ,
	OrganizationKey      int  NOT NULL ,
	DepartmentGroupKey   int  NOT NULL ,
	ScenarioKey          int  NOT NULL ,
	AccountKey           int  NOT NULL ,
	Amount               float(15)  NOT NULL ,
	Date                 datetime  NULL 
)
go

CREATE TABLE FactInternetSales
( 
	ProductKey           int  NOT NULL ,
	OrderDateKey         int  NOT NULL ,
	DueDateKey           int  NOT NULL ,
	ShipDateKey          int  NOT NULL ,
	CustomerKey          int  NOT NULL ,
	PromotionKey         int  NOT NULL ,
	CurrencyKey          int  NOT NULL ,
	SalesTerritoryKey    int  NOT NULL ,
	SalesOrderNumber     nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	SalesOrderLineNumber tinyint  NOT NULL ,
	RevisionNumber       tinyint  NOT NULL ,
	OrderQuantity        smallint  NOT NULL ,
	UnitPrice            money  NOT NULL ,
	ExtendedAmount       money  NOT NULL ,
	UnitPriceDiscountPct float(15)  NOT NULL ,
	DiscountAmount       float(15)  NOT NULL ,
	ProductStandardCost  money  NOT NULL ,
	TotalProductCost     money  NOT NULL ,
	SalesAmount          money  NOT NULL ,
	TaxAmt               money  NOT NULL ,
	Freight              money  NOT NULL ,
	CarrierTrackingNumber nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	CustomerPONumber     nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	OrderDate            datetime  NULL ,
	DueDate              datetime  NULL ,
	ShipDate             datetime  NULL 
)
go

CREATE TABLE FactInternetSalesReason
( 
	SalesOrderNumber     nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	SalesOrderLineNumber tinyint  NOT NULL ,
	SalesReasonKey       int  NOT NULL 
)
go

CREATE TABLE FactProductInventory
( 
	ProductKey           int  NOT NULL ,
	DateKey              int  NOT NULL ,
	MovementDate         date  NOT NULL ,
	UnitCost             money  NOT NULL ,
	UnitsIn              int  NOT NULL ,
	UnitsOut             int  NOT NULL ,
	UnitsBalance         int  NOT NULL 
)
go

CREATE TABLE FactResellerSales
( 
	ProductKey           int  NOT NULL ,
	OrderDateKey         int  NOT NULL ,
	DueDateKey           int  NOT NULL ,
	ShipDateKey          int  NOT NULL ,
	ResellerKey          int  NOT NULL ,
	EmployeeKey          int  NOT NULL ,
	PromotionKey         int  NOT NULL ,
	CurrencyKey          int  NOT NULL ,
	SalesTerritoryKey    int  NOT NULL ,
	SalesOrderNumber     nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	SalesOrderLineNumber tinyint  NOT NULL ,
	RevisionNumber       tinyint  NULL ,
	OrderQuantity        smallint  NULL ,
	UnitPrice            money  NULL ,
	ExtendedAmount       money  NULL ,
	UnitPriceDiscountPct float(15)  NULL ,
	DiscountAmount       float(15)  NULL ,
	ProductStandardCost  money  NULL ,
	TotalProductCost     money  NULL ,
	SalesAmount          money  NULL ,
	TaxAmt               money  NULL ,
	Freight              money  NULL ,
	CarrierTrackingNumber nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	CustomerPONumber     nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	OrderDate            datetime  NULL ,
	DueDate              datetime  NULL ,
	ShipDate             datetime  NULL 
)
go

CREATE TABLE FactSalesQuota
( 
	SalesQuotaKey        int  IDENTITY ( 1,1 )  NOT NULL ,
	EmployeeKey          int  NOT NULL ,
	DateKey              int  NOT NULL ,
	CalendarYear         smallint  NOT NULL ,
	CalendarQuarter      tinyint  NOT NULL ,
	SalesAmountQuota     money  NOT NULL ,
	Date                 datetime  NULL 
)
go

CREATE TABLE FactSurveyResponse
( 
	SurveyResponseKey    int  IDENTITY ( 1,1 )  NOT NULL ,
	DateKey              int  NOT NULL ,
	CustomerKey          int  NOT NULL ,
	ProductCategoryKey   int  NOT NULL ,
	EnglishProductCategoryName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	ProductSubcategoryKey int  NOT NULL ,
	EnglishProductSubcategoryName nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	Date                 datetime  NULL 
)
go

ALTER TABLE DimAccount
	ADD CONSTRAINT PK_DimAccount PRIMARY KEY  CLUSTERED (AccountKey ASC)
go

ALTER TABLE DimCurrency
	ADD CONSTRAINT PK_DimCurrency_CurrencyKey PRIMARY KEY  CLUSTERED (CurrencyKey ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX AK_DimCurrency_CurrencyAlternateKey ON DimCurrency
( 
	CurrencyAlternateKey  ASC
)
go

ALTER TABLE DimCustomer
	ADD CONSTRAINT PK_DimCustomer_CustomerKey PRIMARY KEY  CLUSTERED (CustomerKey ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX IX_DimCustomer_CustomerAlternateKey ON DimCustomer
( 
	CustomerAlternateKey  ASC
)
go

ALTER TABLE DimDate
	ADD CONSTRAINT PK_DimDate_DateKey PRIMARY KEY  CLUSTERED (DateKey ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX AK_DimDate_FullDateAlternateKey ON DimDate
( 
	FullDateAlternateKey  ASC
)
go

ALTER TABLE DimDepartmentGroup
	ADD CONSTRAINT PK_DimDepartmentGroup PRIMARY KEY  CLUSTERED (DepartmentGroupKey ASC)
go

ALTER TABLE DimEmployee
	ADD CONSTRAINT PK_DimEmployee_EmployeeKey PRIMARY KEY  CLUSTERED (EmployeeKey ASC)
go

ALTER TABLE DimGeography
	ADD CONSTRAINT PK_DimGeography_GeographyKey PRIMARY KEY  CLUSTERED (GeographyKey ASC)
go

ALTER TABLE DimOrganization
	ADD CONSTRAINT PK_DimOrganization PRIMARY KEY  CLUSTERED (OrganizationKey ASC)
go

ALTER TABLE DimProduct
	ADD CONSTRAINT PK_DimProduct_ProductKey PRIMARY KEY  CLUSTERED (ProductKey ASC)
go

ALTER TABLE DimProduct
	ADD CONSTRAINT AK_DimProduct_ProductAlternateKey_StartDate UNIQUE (ProductAlternateKey  ASC,StartDate  ASC)
go

ALTER TABLE DimProductCategory
	ADD CONSTRAINT PK_DimProductCategory_ProductCategoryKey PRIMARY KEY  CLUSTERED (ProductCategoryKey ASC)
go

ALTER TABLE DimProductCategory
	ADD CONSTRAINT AK_DimProductCategory_ProductCategoryAlternateKey UNIQUE (ProductCategoryAlternateKey  ASC)
go

ALTER TABLE DimProductSubcategory
	ADD CONSTRAINT PK_DimProductSubcategory_ProductSubcategoryKey PRIMARY KEY  CLUSTERED (ProductSubcategoryKey ASC)
go

ALTER TABLE DimProductSubcategory
	ADD CONSTRAINT AK_DimProductSubcategory_ProductSubcategoryAlternateKey UNIQUE (ProductSubcategoryAlternateKey  ASC)
go

ALTER TABLE DimPromotion
	ADD CONSTRAINT PK_DimPromotion_PromotionKey PRIMARY KEY  CLUSTERED (PromotionKey ASC)
go

ALTER TABLE DimPromotion
	ADD CONSTRAINT AK_DimPromotion_PromotionAlternateKey UNIQUE (PromotionAlternateKey  ASC)
go

ALTER TABLE DimReseller
	ADD CONSTRAINT PK_DimReseller_ResellerKey PRIMARY KEY  CLUSTERED (ResellerKey ASC)
go

ALTER TABLE DimReseller
	ADD CONSTRAINT AK_DimReseller_ResellerAlternateKey UNIQUE (ResellerAlternateKey  ASC)
go

ALTER TABLE DimSalesReason
	ADD CONSTRAINT PK_DimSalesReason_SalesReasonKey PRIMARY KEY  CLUSTERED (SalesReasonKey ASC)
go

ALTER TABLE DimSalesTerritory
	ADD CONSTRAINT PK_DimSalesTerritory_SalesTerritoryKey PRIMARY KEY  CLUSTERED (SalesTerritoryKey ASC)
go

ALTER TABLE DimSalesTerritory
	ADD CONSTRAINT AK_DimSalesTerritory_SalesTerritoryAlternateKey UNIQUE (SalesTerritoryAlternateKey  ASC)
go

ALTER TABLE DimScenario
	ADD CONSTRAINT PK_DimScenario PRIMARY KEY  CLUSTERED (ScenarioKey ASC)
go

ALTER TABLE FactCallCenter
	ADD CONSTRAINT PK_FactCallCenter_FactCallCenterID PRIMARY KEY  CLUSTERED (FactCallCenterID ASC)
go

ALTER TABLE FactCallCenter
	ADD CONSTRAINT AK_FactCallCenter_DateKey_Shift UNIQUE (DateKey  ASC,Shift  ASC)
go

ALTER TABLE FactCurrencyRate
	ADD CONSTRAINT PK_FactCurrencyRate_CurrencyKey_DateKey PRIMARY KEY  CLUSTERED (CurrencyKey ASC,DateKey ASC)
go

ALTER TABLE FactInternetSales
	ADD CONSTRAINT PK_FactInternetSales_SalesOrderNumber_SalesOrderLineNumber PRIMARY KEY  CLUSTERED (SalesOrderNumber ASC,SalesOrderLineNumber ASC)
go

ALTER TABLE FactInternetSalesReason
	ADD CONSTRAINT PK_FactInternetSalesReason_SalesOrderNumber_SalesOrderLineNumber_SalesReasonKey PRIMARY KEY  CLUSTERED (SalesOrderNumber ASC,SalesOrderLineNumber ASC,SalesReasonKey ASC)
go

ALTER TABLE FactProductInventory
	ADD CONSTRAINT PK_FactProductInventory PRIMARY KEY  CLUSTERED (ProductKey ASC,DateKey ASC)
go

ALTER TABLE FactResellerSales
	ADD CONSTRAINT PK_FactResellerSales_SalesOrderNumber_SalesOrderLineNumber PRIMARY KEY  CLUSTERED (SalesOrderNumber ASC,SalesOrderLineNumber ASC)
go

ALTER TABLE FactSalesQuota
	ADD CONSTRAINT PK_FactSalesQuota_SalesQuotaKey PRIMARY KEY  CLUSTERED (SalesQuotaKey ASC)
go

ALTER TABLE FactSurveyResponse
	ADD CONSTRAINT PK_FactSurveyResponse_SurveyResponseKey PRIMARY KEY  CLUSTERED (SurveyResponseKey ASC)
go

CREATE VIEW [dbo].[vDMPrep] AS  SELECT pc.[EnglishProductCategoryName],  Coalesce(p.[ModelName] , p.[EnglishProductName])  AS [Model], c.[CustomerKey], s.[SalesTerritoryGroup] AS [Region], CASE WHEN  Month( GetDate( )) <  Month(c.[BirthDate]) THEN  DateDiff(yy, c.[BirthDate],  GetDate( )) - 1 WHEN  Month( GetDate( )) =  Month(c.[BirthDate]) AND  Day(  GetDate( ) ) <  Day( c.[BirthDate] ) THEN  DateDiff(yy, c.[BirthDate],  GetDate( )) - 1 ELSE  DateDiff(yy, c.[BirthDate],  GetDate( )) END AS [Age], CASE WHEN c.[YearlyIncome] < 40000 THEN 'Low' WHEN c.[YearlyIncome] > 60000 THEN 'High' ELSE 'Moderate' END AS [IncomeGroup], d.[CalendarYear], d.[FiscalYear], d.[MonthNumberOfYear] AS [Month], f.[SalesOrderNumber] AS [OrderNumber], f.SalesOrderLineNumber AS LineNumber, f.OrderQuantity AS Quantity, f.ExtendedAmount AS Amount FROM dbo.FactInternetSales AS f   INNER JOIN   dbo.DimDate AS d ON f.[OrderDateKey] = d.[DateKey]   INNER JOIN   dbo.DimProduct AS p ON f.[ProductKey] = p.[ProductKey]   INNER JOIN   dbo.DimProductSubcategory AS psc ON p.[ProductSubcategoryKey] = psc.[ProductSubcategoryKey]   INNER JOIN   dbo.DimProductCategory AS pc ON psc.[ProductCategoryKey] = pc.[ProductCategoryKey]   INNER JOIN   dbo.DimCustomer AS c ON f.[CustomerKey] = c.[CustomerKey]   INNER JOIN   dbo.DimGeography AS g ON c.[GeographyKey] = g.[GeographyKey]   INNER JOIN   dbo.DimSalesTerritory AS s ON g.[SalesTerritoryKey] = s.[SalesTerritoryKey]
go

CREATE VIEW vTimeSeries(ModelRegion,TimeIndex,Quantity,Amount,CalendarYear,Month,ReportingDate)
AS
SELECT CASE [Model] WHEN 'Mountain-100' THEN 'M200' WHEN 'Road-150' THEN 'R250' WHEN 'Road-650' THEN 'R750' WHEN 'Touring-1000' THEN 'T1000' ELSE  left([Model], 1) +  right([Model], 3) END + ' ' + [Region],( CONVERT(integer, [CalendarYear]) * 100) +  CONVERT(integer, [Month]),SUM( [Quantity]),SUM( [Amount]),vDMPrep.CalendarYear,vDMPrep.Month, [dbo].[udfBuildISO8601Date]( [CalendarYear] , [Month] , 25 ) 
	FROM vDMPrep
		WHERE [Model] IN ('Mountain-100' , 'Mountain-200' , 'Road-150' , 'Road-250' , 'Road-650' , 'Road-750' , 'Touring-1000')
		GROUP BY CASE [Model] WHEN 'Mountain-100' THEN 'M200' WHEN 'Road-150' THEN 'R250' WHEN 'Road-650' THEN 'R750' WHEN 'Touring-1000' THEN 'T1000' ELSE  left(Model, 1) +  right(Model, 3) END + ' ' + [Region], ( CONVERT(integer, [CalendarYear]) * 100) +  CONVERT(integer, [Month]), CalendarYear, [Month],  [dbo].[udfBuildISO8601Date]( [CalendarYear] , [Month] , 25 ) 
go

CREATE VIEW [dbo].[vTargetMail] AS  SELECT c.[CustomerKey], c.[GeographyKey], c.[CustomerAlternateKey], c.[Title], c.[FirstName], c.[MiddleName], c.[LastName], c.[NameStyle], c.[BirthDate], c.[MaritalStatus], c.[Suffix], c.[Gender], c.[EmailAddress], c.[YearlyIncome], c.[TotalChildren], c.[NumberChildrenAtHome], c.[EnglishEducation], c.[SpanishEducation], c.[FrenchEducation], c.[EnglishOccupation], c.[SpanishOccupation], c.[FrenchOccupation], c.[HouseOwnerFlag], c.[NumberCarsOwned], c.[AddressLine1], c.[AddressLine2], c.[Phone], c.[DateFirstPurchase], c.[CommuteDistance], x.[Region], x.[Age], CASE x.[Bikes] WHEN 0 THEN 0 ELSE 1 END AS [BikeBuyer] FROM dbo.DimCustomer AS c   INNER JOIN   (  SELECT [CustomerKey], [Region], [Age], SUM( CASE [EnglishProductCategoryName] WHEN 'Bikes' THEN 1 ELSE 0 END) AS [Bikes] FROM dbo.vDMPrep GROUP BY [CustomerKey], [Region], [Age] ) AS [x]  ON c.[CustomerKey] = x.[CustomerKey]
go

CREATE VIEW vAssocSeqOrders(OrderNumber,CustomerKey,Region,IncomeGroup)
AS
SELECT DISTINCT vDMPrep.OrderNumber,vDMPrep.CustomerKey,vDMPrep.Region,vDMPrep.IncomeGroup
	FROM vDMPrep
		WHERE ( FiscalYear = '2013' )
go

CREATE VIEW vAssocSeqLineItems(OrderNumber,LineNumber,Model)
AS
SELECT vDMPrep.OrderNumber,vDMPrep.LineNumber,vDMPrep.Model
	FROM vDMPrep
		WHERE ( FiscalYear = '2013' )
go


ALTER TABLE DimAccount WITH CHECK 
	ADD CONSTRAINT FK_DimAccount_DimAccount FOREIGN KEY (ParentAccountKey) REFERENCES DimAccount(AccountKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE DimAccount
	  WITH CHECK CHECK CONSTRAINT FK_DimAccount_DimAccount
go


ALTER TABLE DimCustomer WITH CHECK 
	ADD CONSTRAINT FK_DimCustomer_DimGeography FOREIGN KEY (GeographyKey) REFERENCES DimGeography(GeographyKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE DimCustomer
	  WITH CHECK CHECK CONSTRAINT FK_DimCustomer_DimGeography
go


ALTER TABLE DimDepartmentGroup WITH CHECK 
	ADD CONSTRAINT FK_DimDepartmentGroup_DimDepartmentGroup FOREIGN KEY (ParentDepartmentGroupKey) REFERENCES DimDepartmentGroup(DepartmentGroupKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE DimDepartmentGroup
	  WITH CHECK CHECK CONSTRAINT FK_DimDepartmentGroup_DimDepartmentGroup
go


ALTER TABLE DimEmployee WITH CHECK 
	ADD CONSTRAINT FK_DimEmployee_DimSalesTerritory FOREIGN KEY (SalesTerritoryKey) REFERENCES DimSalesTerritory(SalesTerritoryKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE DimEmployee
	  WITH CHECK CHECK CONSTRAINT FK_DimEmployee_DimSalesTerritory
go

ALTER TABLE DimEmployee WITH CHECK 
	ADD CONSTRAINT FK_DimEmployee_DimEmployee FOREIGN KEY (ParentEmployeeKey) REFERENCES DimEmployee(EmployeeKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE DimEmployee
	  WITH CHECK CHECK CONSTRAINT FK_DimEmployee_DimEmployee
go


ALTER TABLE DimGeography WITH CHECK 
	ADD CONSTRAINT FK_DimGeography_DimSalesTerritory FOREIGN KEY (SalesTerritoryKey) REFERENCES DimSalesTerritory(SalesTerritoryKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE DimGeography
	  WITH CHECK CHECK CONSTRAINT FK_DimGeography_DimSalesTerritory
go


ALTER TABLE DimOrganization WITH CHECK 
	ADD CONSTRAINT FK_DimOrganization_DimCurrency FOREIGN KEY (CurrencyKey) REFERENCES DimCurrency(CurrencyKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE DimOrganization
	  WITH CHECK CHECK CONSTRAINT FK_DimOrganization_DimCurrency
go

ALTER TABLE DimOrganization WITH CHECK 
	ADD CONSTRAINT FK_DimOrganization_DimOrganization FOREIGN KEY (ParentOrganizationKey) REFERENCES DimOrganization(OrganizationKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE DimOrganization
	  WITH CHECK CHECK CONSTRAINT FK_DimOrganization_DimOrganization
go


ALTER TABLE DimProduct WITH CHECK 
	ADD CONSTRAINT FK_DimProduct_DimProductSubcategory FOREIGN KEY (ProductSubcategoryKey) REFERENCES DimProductSubcategory(ProductSubcategoryKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE DimProduct
	  WITH CHECK CHECK CONSTRAINT FK_DimProduct_DimProductSubcategory
go


ALTER TABLE DimProductSubcategory WITH CHECK 
	ADD CONSTRAINT FK_DimProductSubcategory_DimProductCategory FOREIGN KEY (ProductCategoryKey) REFERENCES DimProductCategory(ProductCategoryKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE DimProductSubcategory
	  WITH CHECK CHECK CONSTRAINT FK_DimProductSubcategory_DimProductCategory
go


ALTER TABLE DimReseller WITH CHECK 
	ADD CONSTRAINT FK_DimReseller_DimGeography FOREIGN KEY (GeographyKey) REFERENCES DimGeography(GeographyKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE DimReseller
	  WITH CHECK CHECK CONSTRAINT FK_DimReseller_DimGeography
go


ALTER TABLE FactCallCenter WITH CHECK 
	ADD CONSTRAINT FK_FactCallCenter_DimDate FOREIGN KEY (DateKey) REFERENCES DimDate(DateKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactCallCenter
	  WITH CHECK CHECK CONSTRAINT FK_FactCallCenter_DimDate
go


ALTER TABLE FactCurrencyRate WITH CHECK 
	ADD CONSTRAINT FK_FactCurrencyRate_DimDate FOREIGN KEY (DateKey) REFERENCES DimDate(DateKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactCurrencyRate
	  WITH CHECK CHECK CONSTRAINT FK_FactCurrencyRate_DimDate
go

ALTER TABLE FactCurrencyRate WITH CHECK 
	ADD CONSTRAINT FK_FactCurrencyRate_DimCurrency FOREIGN KEY (CurrencyKey) REFERENCES DimCurrency(CurrencyKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactCurrencyRate
	  WITH CHECK CHECK CONSTRAINT FK_FactCurrencyRate_DimCurrency
go


ALTER TABLE FactFinance WITH CHECK 
	ADD CONSTRAINT FK_FactFinance_DimScenario FOREIGN KEY (ScenarioKey) REFERENCES DimScenario(ScenarioKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactFinance
	  WITH CHECK CHECK CONSTRAINT FK_FactFinance_DimScenario
go

ALTER TABLE FactFinance WITH CHECK 
	ADD CONSTRAINT FK_FactFinance_DimOrganization FOREIGN KEY (OrganizationKey) REFERENCES DimOrganization(OrganizationKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactFinance
	  WITH CHECK CHECK CONSTRAINT FK_FactFinance_DimOrganization
go

ALTER TABLE FactFinance WITH CHECK 
	ADD CONSTRAINT FK_FactFinance_DimDepartmentGroup FOREIGN KEY (DepartmentGroupKey) REFERENCES DimDepartmentGroup(DepartmentGroupKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactFinance
	  WITH CHECK CHECK CONSTRAINT FK_FactFinance_DimDepartmentGroup
go

ALTER TABLE FactFinance WITH CHECK 
	ADD CONSTRAINT FK_FactFinance_DimDate FOREIGN KEY (DateKey) REFERENCES DimDate(DateKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactFinance
	  WITH CHECK CHECK CONSTRAINT FK_FactFinance_DimDate
go

ALTER TABLE FactFinance WITH CHECK 
	ADD CONSTRAINT FK_FactFinance_DimAccount FOREIGN KEY (AccountKey) REFERENCES DimAccount(AccountKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactFinance
	  WITH CHECK CHECK CONSTRAINT FK_FactFinance_DimAccount
go


ALTER TABLE FactInternetSales WITH CHECK 
	ADD CONSTRAINT FK_FactInternetSales_DimCurrency FOREIGN KEY (CurrencyKey) REFERENCES DimCurrency(CurrencyKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactInternetSales
	  WITH CHECK CHECK CONSTRAINT FK_FactInternetSales_DimCurrency
go

ALTER TABLE FactInternetSales WITH CHECK 
	ADD CONSTRAINT FK_FactInternetSales_DimCustomer FOREIGN KEY (CustomerKey) REFERENCES DimCustomer(CustomerKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactInternetSales
	  WITH CHECK CHECK CONSTRAINT FK_FactInternetSales_DimCustomer
go

ALTER TABLE FactInternetSales WITH CHECK 
	ADD CONSTRAINT FK_FactInternetSales_DimDate FOREIGN KEY (OrderDateKey) REFERENCES DimDate(DateKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactInternetSales
	  WITH CHECK CHECK CONSTRAINT FK_FactInternetSales_DimDate
go

ALTER TABLE FactInternetSales WITH CHECK 
	ADD CONSTRAINT FK_FactInternetSales_DimDate1 FOREIGN KEY (DueDateKey) REFERENCES DimDate(DateKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactInternetSales
	  WITH CHECK CHECK CONSTRAINT FK_FactInternetSales_DimDate1
go

ALTER TABLE FactInternetSales WITH CHECK 
	ADD CONSTRAINT FK_FactInternetSales_DimDate2 FOREIGN KEY (ShipDateKey) REFERENCES DimDate(DateKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactInternetSales
	  WITH CHECK CHECK CONSTRAINT FK_FactInternetSales_DimDate2
go

ALTER TABLE FactInternetSales WITH CHECK 
	ADD CONSTRAINT FK_FactInternetSales_DimProduct FOREIGN KEY (ProductKey) REFERENCES DimProduct(ProductKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactInternetSales
	  WITH CHECK CHECK CONSTRAINT FK_FactInternetSales_DimProduct
go

ALTER TABLE FactInternetSales WITH CHECK 
	ADD CONSTRAINT FK_FactInternetSales_DimPromotion FOREIGN KEY (PromotionKey) REFERENCES DimPromotion(PromotionKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactInternetSales
	  WITH CHECK CHECK CONSTRAINT FK_FactInternetSales_DimPromotion
go

ALTER TABLE FactInternetSales WITH CHECK 
	ADD CONSTRAINT FK_FactInternetSales_DimSalesTerritory FOREIGN KEY (SalesTerritoryKey) REFERENCES DimSalesTerritory(SalesTerritoryKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactInternetSales
	  WITH CHECK CHECK CONSTRAINT FK_FactInternetSales_DimSalesTerritory
go


ALTER TABLE FactInternetSalesReason WITH CHECK 
	ADD CONSTRAINT FK_FactInternetSalesReason_FactInternetSales FOREIGN KEY (SalesOrderNumber,SalesOrderLineNumber) REFERENCES FactInternetSales(SalesOrderNumber,SalesOrderLineNumber)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactInternetSalesReason
	  WITH CHECK CHECK CONSTRAINT FK_FactInternetSalesReason_FactInternetSales
go

ALTER TABLE FactInternetSalesReason WITH CHECK 
	ADD CONSTRAINT FK_FactInternetSalesReason_DimSalesReason FOREIGN KEY (SalesReasonKey) REFERENCES DimSalesReason(SalesReasonKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactInternetSalesReason
	  WITH CHECK CHECK CONSTRAINT FK_FactInternetSalesReason_DimSalesReason
go


ALTER TABLE FactProductInventory WITH CHECK 
	ADD CONSTRAINT FK_FactProductInventory_DimDate FOREIGN KEY (DateKey) REFERENCES DimDate(DateKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactProductInventory
	  WITH CHECK CHECK CONSTRAINT FK_FactProductInventory_DimDate
go

ALTER TABLE FactProductInventory WITH CHECK 
	ADD CONSTRAINT FK_FactProductInventory_DimProduct FOREIGN KEY (ProductKey) REFERENCES DimProduct(ProductKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactProductInventory
	  WITH CHECK CHECK CONSTRAINT FK_FactProductInventory_DimProduct
go


ALTER TABLE FactResellerSales WITH CHECK 
	ADD CONSTRAINT FK_FactResellerSales_DimCurrency FOREIGN KEY (CurrencyKey) REFERENCES DimCurrency(CurrencyKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactResellerSales
	  WITH CHECK CHECK CONSTRAINT FK_FactResellerSales_DimCurrency
go

ALTER TABLE FactResellerSales WITH CHECK 
	ADD CONSTRAINT FK_FactResellerSales_DimDate FOREIGN KEY (OrderDateKey) REFERENCES DimDate(DateKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactResellerSales
	  WITH CHECK CHECK CONSTRAINT FK_FactResellerSales_DimDate
go

ALTER TABLE FactResellerSales WITH CHECK 
	ADD CONSTRAINT FK_FactResellerSales_DimDate1 FOREIGN KEY (DueDateKey) REFERENCES DimDate(DateKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactResellerSales
	  WITH CHECK CHECK CONSTRAINT FK_FactResellerSales_DimDate1
go

ALTER TABLE FactResellerSales WITH CHECK 
	ADD CONSTRAINT FK_FactResellerSales_DimDate2 FOREIGN KEY (ShipDateKey) REFERENCES DimDate(DateKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactResellerSales
	  WITH CHECK CHECK CONSTRAINT FK_FactResellerSales_DimDate2
go

ALTER TABLE FactResellerSales WITH CHECK 
	ADD CONSTRAINT FK_FactResellerSales_DimEmployee FOREIGN KEY (EmployeeKey) REFERENCES DimEmployee(EmployeeKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactResellerSales
	  WITH CHECK CHECK CONSTRAINT FK_FactResellerSales_DimEmployee
go

ALTER TABLE FactResellerSales WITH CHECK 
	ADD CONSTRAINT FK_FactResellerSales_DimProduct FOREIGN KEY (ProductKey) REFERENCES DimProduct(ProductKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactResellerSales
	  WITH CHECK CHECK CONSTRAINT FK_FactResellerSales_DimProduct
go

ALTER TABLE FactResellerSales WITH CHECK 
	ADD CONSTRAINT FK_FactResellerSales_DimPromotion FOREIGN KEY (PromotionKey) REFERENCES DimPromotion(PromotionKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactResellerSales
	  WITH CHECK CHECK CONSTRAINT FK_FactResellerSales_DimPromotion
go

ALTER TABLE FactResellerSales WITH CHECK 
	ADD CONSTRAINT FK_FactResellerSales_DimReseller FOREIGN KEY (ResellerKey) REFERENCES DimReseller(ResellerKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactResellerSales
	  WITH CHECK CHECK CONSTRAINT FK_FactResellerSales_DimReseller
go

ALTER TABLE FactResellerSales WITH CHECK 
	ADD CONSTRAINT FK_FactResellerSales_DimSalesTerritory FOREIGN KEY (SalesTerritoryKey) REFERENCES DimSalesTerritory(SalesTerritoryKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactResellerSales
	  WITH CHECK CHECK CONSTRAINT FK_FactResellerSales_DimSalesTerritory
go


ALTER TABLE FactSalesQuota WITH CHECK 
	ADD CONSTRAINT FK_FactSalesQuota_DimEmployee FOREIGN KEY (EmployeeKey) REFERENCES DimEmployee(EmployeeKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactSalesQuota
	  WITH CHECK CHECK CONSTRAINT FK_FactSalesQuota_DimEmployee
go

ALTER TABLE FactSalesQuota WITH CHECK 
	ADD CONSTRAINT FK_FactSalesQuota_DimDate FOREIGN KEY (DateKey) REFERENCES DimDate(DateKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactSalesQuota
	  WITH CHECK CHECK CONSTRAINT FK_FactSalesQuota_DimDate
go


ALTER TABLE FactSurveyResponse WITH CHECK 
	ADD CONSTRAINT FK_FactSurveyResponse_DateKey FOREIGN KEY (DateKey) REFERENCES DimDate(DateKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactSurveyResponse
	  WITH CHECK CHECK CONSTRAINT FK_FactSurveyResponse_DateKey
go

ALTER TABLE FactSurveyResponse WITH CHECK 
	ADD CONSTRAINT FK_FactSurveyResponse_CustomerKey FOREIGN KEY (CustomerKey) REFERENCES DimCustomer(CustomerKey)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE FactSurveyResponse
	  WITH CHECK CHECK CONSTRAINT FK_FactSurveyResponse_CustomerKey
go

CREATE TRIGGER dbo.tD_DimAccount ON dbo.DimAccount FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimAccount */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimAccount  dbo.FactFinance on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00038d7b", PARENT_OWNER="dbo", PARENT_TABLE="DimAccount"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimAccount", FK_COLUMNS="AccountKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactFinance
      WHERE
        /*  %JoinFKPK(dbo.FactFinance,deleted," = "," AND") */
        dbo.FactFinance.AccountKey = deleted.AccountKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimAccount because dbo.FactFinance exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimAccount  dbo.DimAccount on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimAccount"
    CHILD_OWNER="dbo", CHILD_TABLE="DimAccount"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimAccount_DimAccount", FK_COLUMNS="ParentAccountKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimAccount
      WHERE
        /*  %JoinFKPK(dbo.DimAccount,deleted," = "," AND") */
        dbo.DimAccount.ParentAccountKey = deleted.AccountKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimAccount because dbo.DimAccount exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimAccount  dbo.DimAccount on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimAccount"
    CHILD_OWNER="dbo", CHILD_TABLE="DimAccount"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimAccount_DimAccount", FK_COLUMNS="ParentAccountKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimAccount
      WHERE
        /* %JoinFKPK(deleted,dbo.DimAccount," = "," AND") */
        deleted.ParentAccountKey = dbo.DimAccount.AccountKey AND
        NOT EXISTS (
          SELECT * FROM dbo.DimAccount
          WHERE
            /* %JoinFKPK(dbo.DimAccount,dbo.DimAccount," = "," AND") */
            dbo.DimAccount.ParentAccountKey = dbo.DimAccount.AccountKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.DimAccount because dbo.DimAccount exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimAccount ON dbo.DimAccount FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimAccount */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAccountKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimAccount  dbo.FactFinance on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00040a36", PARENT_OWNER="dbo", PARENT_TABLE="DimAccount"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimAccount", FK_COLUMNS="AccountKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AccountKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactFinance
      WHERE
        /*  %JoinFKPK(dbo.FactFinance,deleted," = "," AND") */
        dbo.FactFinance.AccountKey = deleted.AccountKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimAccount because dbo.FactFinance exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimAccount  dbo.DimAccount on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimAccount"
    CHILD_OWNER="dbo", CHILD_TABLE="DimAccount"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimAccount_DimAccount", FK_COLUMNS="ParentAccountKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AccountKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimAccount
      WHERE
        /*  %JoinFKPK(dbo.DimAccount,deleted," = "," AND") */
        dbo.DimAccount.ParentAccountKey = deleted.AccountKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimAccount because dbo.DimAccount exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimAccount  dbo.DimAccount on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimAccount"
    CHILD_OWNER="dbo", CHILD_TABLE="DimAccount"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimAccount_DimAccount", FK_COLUMNS="ParentAccountKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ParentAccountKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimAccount
        WHERE
          /* %JoinFKPK(inserted,dbo.DimAccount) */
          inserted.ParentAccountKey = dbo.DimAccount.AccountKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ParentAccountKey IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.DimAccount because dbo.DimAccount does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimCurrency ON dbo.DimCurrency FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimCurrency */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimCurrency  dbo.FactResellerSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004a94a", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimCurrency", FK_COLUMNS="CurrencyKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.CurrencyKey = deleted.CurrencyKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimCurrency because dbo.FactResellerSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimCurrency  dbo.FactInternetSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimCurrency", FK_COLUMNS="CurrencyKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.CurrencyKey = deleted.CurrencyKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimCurrency because dbo.FactInternetSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimCurrency  dbo.FactCurrencyRate on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="FactCurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactCurrencyRate_DimCurrency", FK_COLUMNS="CurrencyKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactCurrencyRate
      WHERE
        /*  %JoinFKPK(dbo.FactCurrencyRate,deleted," = "," AND") */
        dbo.FactCurrencyRate.CurrencyKey = deleted.CurrencyKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimCurrency because dbo.FactCurrencyRate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimCurrency  dbo.DimOrganization on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="DimOrganization"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimOrganization_DimCurrency", FK_COLUMNS="CurrencyKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimOrganization
      WHERE
        /*  %JoinFKPK(dbo.DimOrganization,deleted," = "," AND") */
        dbo.DimOrganization.CurrencyKey = deleted.CurrencyKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimCurrency because dbo.DimOrganization exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimCurrency ON dbo.DimCurrency FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimCurrency */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCurrencyKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimCurrency  dbo.FactResellerSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000537ea", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimCurrency", FK_COLUMNS="CurrencyKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.CurrencyKey = deleted.CurrencyKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimCurrency because dbo.FactResellerSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimCurrency  dbo.FactInternetSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimCurrency", FK_COLUMNS="CurrencyKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.CurrencyKey = deleted.CurrencyKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimCurrency because dbo.FactInternetSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimCurrency  dbo.FactCurrencyRate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="FactCurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactCurrencyRate_DimCurrency", FK_COLUMNS="CurrencyKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactCurrencyRate
      WHERE
        /*  %JoinFKPK(dbo.FactCurrencyRate,deleted," = "," AND") */
        dbo.FactCurrencyRate.CurrencyKey = deleted.CurrencyKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimCurrency because dbo.FactCurrencyRate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimCurrency  dbo.DimOrganization on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="DimOrganization"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimOrganization_DimCurrency", FK_COLUMNS="CurrencyKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimOrganization
      WHERE
        /*  %JoinFKPK(dbo.DimOrganization,deleted," = "," AND") */
        dbo.DimOrganization.CurrencyKey = deleted.CurrencyKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimCurrency because dbo.DimOrganization exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimCustomer ON dbo.DimCustomer FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimCustomer */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimCustomer  dbo.FactSurveyResponse on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003e1ec", PARENT_OWNER="dbo", PARENT_TABLE="DimCustomer"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSurveyResponse"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSurveyResponse_CustomerKey", FK_COLUMNS="CustomerKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactSurveyResponse
      WHERE
        /*  %JoinFKPK(dbo.FactSurveyResponse,deleted," = "," AND") */
        dbo.FactSurveyResponse.CustomerKey = deleted.CustomerKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimCustomer because dbo.FactSurveyResponse exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimCustomer  dbo.FactInternetSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCustomer"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimCustomer", FK_COLUMNS="CustomerKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.CustomerKey = deleted.CustomerKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimCustomer because dbo.FactInternetSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimGeography  dbo.DimCustomer on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimGeography"
    CHILD_OWNER="dbo", CHILD_TABLE="DimCustomer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimCustomer_DimGeography", FK_COLUMNS="GeographyKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimGeography
      WHERE
        /* %JoinFKPK(deleted,dbo.DimGeography," = "," AND") */
        deleted.GeographyKey = dbo.DimGeography.GeographyKey AND
        NOT EXISTS (
          SELECT * FROM dbo.DimCustomer
          WHERE
            /* %JoinFKPK(dbo.DimCustomer,dbo.DimGeography," = "," AND") */
            dbo.DimCustomer.GeographyKey = dbo.DimGeography.GeographyKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.DimCustomer because dbo.DimGeography exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimCustomer ON dbo.DimCustomer FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimCustomer */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCustomerKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimCustomer  dbo.FactSurveyResponse on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00044ea1", PARENT_OWNER="dbo", PARENT_TABLE="DimCustomer"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSurveyResponse"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSurveyResponse_CustomerKey", FK_COLUMNS="CustomerKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustomerKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactSurveyResponse
      WHERE
        /*  %JoinFKPK(dbo.FactSurveyResponse,deleted," = "," AND") */
        dbo.FactSurveyResponse.CustomerKey = deleted.CustomerKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimCustomer because dbo.FactSurveyResponse exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimCustomer  dbo.FactInternetSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCustomer"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimCustomer", FK_COLUMNS="CustomerKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustomerKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.CustomerKey = deleted.CustomerKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimCustomer because dbo.FactInternetSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimGeography  dbo.DimCustomer on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimGeography"
    CHILD_OWNER="dbo", CHILD_TABLE="DimCustomer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimCustomer_DimGeography", FK_COLUMNS="GeographyKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(GeographyKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimGeography
        WHERE
          /* %JoinFKPK(inserted,dbo.DimGeography) */
          inserted.GeographyKey = dbo.DimGeography.GeographyKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.GeographyKey IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.DimCustomer because dbo.DimGeography does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimDate ON dbo.DimDate FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimDate */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactSurveyResponse on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000d6ac3", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSurveyResponse"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSurveyResponse_DateKey", FK_COLUMNS="DateKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactSurveyResponse
      WHERE
        /*  %JoinFKPK(dbo.FactSurveyResponse,deleted," = "," AND") */
        dbo.FactSurveyResponse.DateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDate because dbo.FactSurveyResponse exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactSalesQuota on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSalesQuota"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSalesQuota_DimDate", FK_COLUMNS="DateKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactSalesQuota
      WHERE
        /*  %JoinFKPK(dbo.FactSalesQuota,deleted," = "," AND") */
        dbo.FactSalesQuota.DateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDate because dbo.FactSalesQuota exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactResellerSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimDate2", FK_COLUMNS="ShipDateKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.ShipDateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDate because dbo.FactResellerSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactResellerSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimDate1", FK_COLUMNS="DueDateKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.DueDateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDate because dbo.FactResellerSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactResellerSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimDate", FK_COLUMNS="OrderDateKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.OrderDateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDate because dbo.FactResellerSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactProductInventory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactProductInventory_DimDate", FK_COLUMNS="DateKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactProductInventory
      WHERE
        /*  %JoinFKPK(dbo.FactProductInventory,deleted," = "," AND") */
        dbo.FactProductInventory.DateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDate because dbo.FactProductInventory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactInternetSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimDate2", FK_COLUMNS="ShipDateKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.ShipDateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDate because dbo.FactInternetSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactInternetSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimDate1", FK_COLUMNS="DueDateKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.DueDateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDate because dbo.FactInternetSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactInternetSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimDate", FK_COLUMNS="OrderDateKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.OrderDateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDate because dbo.FactInternetSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactFinance on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimDate", FK_COLUMNS="DateKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactFinance
      WHERE
        /*  %JoinFKPK(dbo.FactFinance,deleted," = "," AND") */
        dbo.FactFinance.DateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDate because dbo.FactFinance exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactCurrencyRate on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactCurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactCurrencyRate_DimDate", FK_COLUMNS="DateKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactCurrencyRate
      WHERE
        /*  %JoinFKPK(dbo.FactCurrencyRate,deleted," = "," AND") */
        dbo.FactCurrencyRate.DateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDate because dbo.FactCurrencyRate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactCallCenter on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactCallCenter"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactCallCenter_DimDate", FK_COLUMNS="DateKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactCallCenter
      WHERE
        /*  %JoinFKPK(dbo.FactCallCenter,deleted," = "," AND") */
        dbo.FactCallCenter.DateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDate because dbo.FactCallCenter exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimDate ON dbo.DimDate FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimDate */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insDateKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactSurveyResponse on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000e8e60", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSurveyResponse"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSurveyResponse_DateKey", FK_COLUMNS="DateKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactSurveyResponse
      WHERE
        /*  %JoinFKPK(dbo.FactSurveyResponse,deleted," = "," AND") */
        dbo.FactSurveyResponse.DateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDate because dbo.FactSurveyResponse exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactSalesQuota on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSalesQuota"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSalesQuota_DimDate", FK_COLUMNS="DateKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactSalesQuota
      WHERE
        /*  %JoinFKPK(dbo.FactSalesQuota,deleted," = "," AND") */
        dbo.FactSalesQuota.DateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDate because dbo.FactSalesQuota exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactResellerSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimDate2", FK_COLUMNS="ShipDateKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.ShipDateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDate because dbo.FactResellerSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactResellerSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimDate1", FK_COLUMNS="DueDateKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.DueDateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDate because dbo.FactResellerSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactResellerSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimDate", FK_COLUMNS="OrderDateKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.OrderDateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDate because dbo.FactResellerSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactProductInventory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactProductInventory_DimDate", FK_COLUMNS="DateKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactProductInventory
      WHERE
        /*  %JoinFKPK(dbo.FactProductInventory,deleted," = "," AND") */
        dbo.FactProductInventory.DateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDate because dbo.FactProductInventory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactInternetSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimDate2", FK_COLUMNS="ShipDateKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.ShipDateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDate because dbo.FactInternetSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactInternetSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimDate1", FK_COLUMNS="DueDateKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.DueDateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDate because dbo.FactInternetSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactInternetSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimDate", FK_COLUMNS="OrderDateKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.OrderDateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDate because dbo.FactInternetSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactFinance on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimDate", FK_COLUMNS="DateKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactFinance
      WHERE
        /*  %JoinFKPK(dbo.FactFinance,deleted," = "," AND") */
        dbo.FactFinance.DateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDate because dbo.FactFinance exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactCurrencyRate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactCurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactCurrencyRate_DimDate", FK_COLUMNS="DateKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactCurrencyRate
      WHERE
        /*  %JoinFKPK(dbo.FactCurrencyRate,deleted," = "," AND") */
        dbo.FactCurrencyRate.DateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDate because dbo.FactCurrencyRate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactCallCenter on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactCallCenter"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactCallCenter_DimDate", FK_COLUMNS="DateKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactCallCenter
      WHERE
        /*  %JoinFKPK(dbo.FactCallCenter,deleted," = "," AND") */
        dbo.FactCallCenter.DateKey = deleted.DateKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDate because dbo.FactCallCenter exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimDepartmentGroup ON dbo.DimDepartmentGroup FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimDepartmentGroup */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimDepartmentGroup  dbo.FactFinance on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004521d", PARENT_OWNER="dbo", PARENT_TABLE="DimDepartmentGroup"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimDepartmentGroup", FK_COLUMNS="DepartmentGroupKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactFinance
      WHERE
        /*  %JoinFKPK(dbo.FactFinance,deleted," = "," AND") */
        dbo.FactFinance.DepartmentGroupKey = deleted.DepartmentGroupKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDepartmentGroup because dbo.FactFinance exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDepartmentGroup  dbo.DimDepartmentGroup on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDepartmentGroup"
    CHILD_OWNER="dbo", CHILD_TABLE="DimDepartmentGroup"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimDepartmentGroup_DimDepartmentGroup", FK_COLUMNS="ParentDepartmentGroupKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimDepartmentGroup
      WHERE
        /*  %JoinFKPK(dbo.DimDepartmentGroup,deleted," = "," AND") */
        dbo.DimDepartmentGroup.ParentDepartmentGroupKey = deleted.DepartmentGroupKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimDepartmentGroup because dbo.DimDepartmentGroup exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDepartmentGroup  dbo.DimDepartmentGroup on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDepartmentGroup"
    CHILD_OWNER="dbo", CHILD_TABLE="DimDepartmentGroup"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimDepartmentGroup_DimDepartmentGroup", FK_COLUMNS="ParentDepartmentGroupKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDepartmentGroup
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDepartmentGroup," = "," AND") */
        deleted.ParentDepartmentGroupKey = dbo.DimDepartmentGroup.DepartmentGroupKey AND
        NOT EXISTS (
          SELECT * FROM dbo.DimDepartmentGroup
          WHERE
            /* %JoinFKPK(dbo.DimDepartmentGroup,dbo.DimDepartmentGroup," = "," AND") */
            dbo.DimDepartmentGroup.ParentDepartmentGroupKey = dbo.DimDepartmentGroup.DepartmentGroupKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.DimDepartmentGroup because dbo.DimDepartmentGroup exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimDepartmentGroup ON dbo.DimDepartmentGroup FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimDepartmentGroup */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insDepartmentGroupKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimDepartmentGroup  dbo.FactFinance on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00049304", PARENT_OWNER="dbo", PARENT_TABLE="DimDepartmentGroup"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimDepartmentGroup", FK_COLUMNS="DepartmentGroupKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DepartmentGroupKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactFinance
      WHERE
        /*  %JoinFKPK(dbo.FactFinance,deleted," = "," AND") */
        dbo.FactFinance.DepartmentGroupKey = deleted.DepartmentGroupKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDepartmentGroup because dbo.FactFinance exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDepartmentGroup  dbo.DimDepartmentGroup on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDepartmentGroup"
    CHILD_OWNER="dbo", CHILD_TABLE="DimDepartmentGroup"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimDepartmentGroup_DimDepartmentGroup", FK_COLUMNS="ParentDepartmentGroupKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DepartmentGroupKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimDepartmentGroup
      WHERE
        /*  %JoinFKPK(dbo.DimDepartmentGroup,deleted," = "," AND") */
        dbo.DimDepartmentGroup.ParentDepartmentGroupKey = deleted.DepartmentGroupKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimDepartmentGroup because dbo.DimDepartmentGroup exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDepartmentGroup  dbo.DimDepartmentGroup on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDepartmentGroup"
    CHILD_OWNER="dbo", CHILD_TABLE="DimDepartmentGroup"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimDepartmentGroup_DimDepartmentGroup", FK_COLUMNS="ParentDepartmentGroupKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ParentDepartmentGroupKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDepartmentGroup
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDepartmentGroup) */
          inserted.ParentDepartmentGroupKey = dbo.DimDepartmentGroup.DepartmentGroupKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ParentDepartmentGroupKey IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.DimDepartmentGroup because dbo.DimDepartmentGroup does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimEmployee ON dbo.DimEmployee FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimEmployee */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimEmployee  dbo.FactSalesQuota on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000692db", PARENT_OWNER="dbo", PARENT_TABLE="DimEmployee"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSalesQuota"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSalesQuota_DimEmployee", FK_COLUMNS="EmployeeKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactSalesQuota
      WHERE
        /*  %JoinFKPK(dbo.FactSalesQuota,deleted," = "," AND") */
        dbo.FactSalesQuota.EmployeeKey = deleted.EmployeeKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimEmployee because dbo.FactSalesQuota exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimEmployee  dbo.FactResellerSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimEmployee"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimEmployee", FK_COLUMNS="EmployeeKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.EmployeeKey = deleted.EmployeeKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimEmployee because dbo.FactResellerSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimEmployee  dbo.DimEmployee on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimEmployee"
    CHILD_OWNER="dbo", CHILD_TABLE="DimEmployee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimEmployee_DimEmployee", FK_COLUMNS="ParentEmployeeKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimEmployee
      WHERE
        /*  %JoinFKPK(dbo.DimEmployee,deleted," = "," AND") */
        dbo.DimEmployee.ParentEmployeeKey = deleted.EmployeeKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimEmployee because dbo.DimEmployee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimEmployee  dbo.DimEmployee on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimEmployee"
    CHILD_OWNER="dbo", CHILD_TABLE="DimEmployee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimEmployee_DimEmployee", FK_COLUMNS="ParentEmployeeKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimEmployee
      WHERE
        /* %JoinFKPK(deleted,dbo.DimEmployee," = "," AND") */
        deleted.ParentEmployeeKey = dbo.DimEmployee.EmployeeKey AND
        NOT EXISTS (
          SELECT * FROM dbo.DimEmployee
          WHERE
            /* %JoinFKPK(dbo.DimEmployee,dbo.DimEmployee," = "," AND") */
            dbo.DimEmployee.ParentEmployeeKey = dbo.DimEmployee.EmployeeKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.DimEmployee because dbo.DimEmployee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimSalesTerritory  dbo.DimEmployee on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimEmployee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimEmployee_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimSalesTerritory
      WHERE
        /* %JoinFKPK(deleted,dbo.DimSalesTerritory," = "," AND") */
        deleted.SalesTerritoryKey = dbo.DimSalesTerritory.SalesTerritoryKey AND
        NOT EXISTS (
          SELECT * FROM dbo.DimEmployee
          WHERE
            /* %JoinFKPK(dbo.DimEmployee,dbo.DimSalesTerritory," = "," AND") */
            dbo.DimEmployee.SalesTerritoryKey = dbo.DimSalesTerritory.SalesTerritoryKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.DimEmployee because dbo.DimSalesTerritory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimEmployee ON dbo.DimEmployee FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimEmployee */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insEmployeeKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimEmployee  dbo.FactSalesQuota on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00071de7", PARENT_OWNER="dbo", PARENT_TABLE="DimEmployee"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSalesQuota"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSalesQuota_DimEmployee", FK_COLUMNS="EmployeeKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(EmployeeKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactSalesQuota
      WHERE
        /*  %JoinFKPK(dbo.FactSalesQuota,deleted," = "," AND") */
        dbo.FactSalesQuota.EmployeeKey = deleted.EmployeeKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimEmployee because dbo.FactSalesQuota exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimEmployee  dbo.FactResellerSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimEmployee"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimEmployee", FK_COLUMNS="EmployeeKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(EmployeeKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.EmployeeKey = deleted.EmployeeKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimEmployee because dbo.FactResellerSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimEmployee  dbo.DimEmployee on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimEmployee"
    CHILD_OWNER="dbo", CHILD_TABLE="DimEmployee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimEmployee_DimEmployee", FK_COLUMNS="ParentEmployeeKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(EmployeeKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimEmployee
      WHERE
        /*  %JoinFKPK(dbo.DimEmployee,deleted," = "," AND") */
        dbo.DimEmployee.ParentEmployeeKey = deleted.EmployeeKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimEmployee because dbo.DimEmployee exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimEmployee  dbo.DimEmployee on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimEmployee"
    CHILD_OWNER="dbo", CHILD_TABLE="DimEmployee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimEmployee_DimEmployee", FK_COLUMNS="ParentEmployeeKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ParentEmployeeKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimEmployee
        WHERE
          /* %JoinFKPK(inserted,dbo.DimEmployee) */
          inserted.ParentEmployeeKey = dbo.DimEmployee.EmployeeKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ParentEmployeeKey IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.DimEmployee because dbo.DimEmployee does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimSalesTerritory  dbo.DimEmployee on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimEmployee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimEmployee_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesTerritoryKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimSalesTerritory
        WHERE
          /* %JoinFKPK(inserted,dbo.DimSalesTerritory) */
          inserted.SalesTerritoryKey = dbo.DimSalesTerritory.SalesTerritoryKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.SalesTerritoryKey IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.DimEmployee because dbo.DimSalesTerritory does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimGeography ON dbo.DimGeography FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimGeography */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimGeography  dbo.DimReseller on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003d6b6", PARENT_OWNER="dbo", PARENT_TABLE="DimGeography"
    CHILD_OWNER="dbo", CHILD_TABLE="DimReseller"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimReseller_DimGeography", FK_COLUMNS="GeographyKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimReseller
      WHERE
        /*  %JoinFKPK(dbo.DimReseller,deleted," = "," AND") */
        dbo.DimReseller.GeographyKey = deleted.GeographyKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimGeography because dbo.DimReseller exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimGeography  dbo.DimCustomer on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimGeography"
    CHILD_OWNER="dbo", CHILD_TABLE="DimCustomer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimCustomer_DimGeography", FK_COLUMNS="GeographyKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimCustomer
      WHERE
        /*  %JoinFKPK(dbo.DimCustomer,deleted," = "," AND") */
        dbo.DimCustomer.GeographyKey = deleted.GeographyKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimGeography because dbo.DimCustomer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimSalesTerritory  dbo.DimGeography on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimGeography"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimGeography_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimSalesTerritory
      WHERE
        /* %JoinFKPK(deleted,dbo.DimSalesTerritory," = "," AND") */
        deleted.SalesTerritoryKey = dbo.DimSalesTerritory.SalesTerritoryKey AND
        NOT EXISTS (
          SELECT * FROM dbo.DimGeography
          WHERE
            /* %JoinFKPK(dbo.DimGeography,dbo.DimSalesTerritory," = "," AND") */
            dbo.DimGeography.SalesTerritoryKey = dbo.DimSalesTerritory.SalesTerritoryKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.DimGeography because dbo.DimSalesTerritory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimGeography ON dbo.DimGeography FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimGeography */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insGeographyKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimGeography  dbo.DimReseller on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000437a4", PARENT_OWNER="dbo", PARENT_TABLE="DimGeography"
    CHILD_OWNER="dbo", CHILD_TABLE="DimReseller"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimReseller_DimGeography", FK_COLUMNS="GeographyKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(GeographyKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimReseller
      WHERE
        /*  %JoinFKPK(dbo.DimReseller,deleted," = "," AND") */
        dbo.DimReseller.GeographyKey = deleted.GeographyKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimGeography because dbo.DimReseller exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimGeography  dbo.DimCustomer on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimGeography"
    CHILD_OWNER="dbo", CHILD_TABLE="DimCustomer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimCustomer_DimGeography", FK_COLUMNS="GeographyKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(GeographyKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimCustomer
      WHERE
        /*  %JoinFKPK(dbo.DimCustomer,deleted," = "," AND") */
        dbo.DimCustomer.GeographyKey = deleted.GeographyKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimGeography because dbo.DimCustomer exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimSalesTerritory  dbo.DimGeography on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimGeography"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimGeography_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesTerritoryKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimSalesTerritory
        WHERE
          /* %JoinFKPK(inserted,dbo.DimSalesTerritory) */
          inserted.SalesTerritoryKey = dbo.DimSalesTerritory.SalesTerritoryKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.SalesTerritoryKey IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.DimGeography because dbo.DimSalesTerritory does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimOrganization ON dbo.DimOrganization FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimOrganization */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimOrganization  dbo.FactFinance on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00059215", PARENT_OWNER="dbo", PARENT_TABLE="DimOrganization"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimOrganization", FK_COLUMNS="OrganizationKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactFinance
      WHERE
        /*  %JoinFKPK(dbo.FactFinance,deleted," = "," AND") */
        dbo.FactFinance.OrganizationKey = deleted.OrganizationKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimOrganization because dbo.FactFinance exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimOrganization  dbo.DimOrganization on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimOrganization"
    CHILD_OWNER="dbo", CHILD_TABLE="DimOrganization"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimOrganization_DimOrganization", FK_COLUMNS="ParentOrganizationKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimOrganization
      WHERE
        /*  %JoinFKPK(dbo.DimOrganization,deleted," = "," AND") */
        dbo.DimOrganization.ParentOrganizationKey = deleted.OrganizationKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimOrganization because dbo.DimOrganization exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimOrganization  dbo.DimOrganization on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimOrganization"
    CHILD_OWNER="dbo", CHILD_TABLE="DimOrganization"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimOrganization_DimOrganization", FK_COLUMNS="ParentOrganizationKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimOrganization
      WHERE
        /* %JoinFKPK(deleted,dbo.DimOrganization," = "," AND") */
        deleted.ParentOrganizationKey = dbo.DimOrganization.OrganizationKey AND
        NOT EXISTS (
          SELECT * FROM dbo.DimOrganization
          WHERE
            /* %JoinFKPK(dbo.DimOrganization,dbo.DimOrganization," = "," AND") */
            dbo.DimOrganization.ParentOrganizationKey = dbo.DimOrganization.OrganizationKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.DimOrganization because dbo.DimOrganization exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimCurrency  dbo.DimOrganization on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="DimOrganization"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimOrganization_DimCurrency", FK_COLUMNS="CurrencyKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimCurrency
      WHERE
        /* %JoinFKPK(deleted,dbo.DimCurrency," = "," AND") */
        deleted.CurrencyKey = dbo.DimCurrency.CurrencyKey AND
        NOT EXISTS (
          SELECT * FROM dbo.DimOrganization
          WHERE
            /* %JoinFKPK(dbo.DimOrganization,dbo.DimCurrency," = "," AND") */
            dbo.DimOrganization.CurrencyKey = dbo.DimCurrency.CurrencyKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.DimOrganization because dbo.DimCurrency exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimOrganization ON dbo.DimOrganization FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimOrganization */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insOrganizationKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimOrganization  dbo.FactFinance on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000616b3", PARENT_OWNER="dbo", PARENT_TABLE="DimOrganization"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimOrganization", FK_COLUMNS="OrganizationKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(OrganizationKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactFinance
      WHERE
        /*  %JoinFKPK(dbo.FactFinance,deleted," = "," AND") */
        dbo.FactFinance.OrganizationKey = deleted.OrganizationKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimOrganization because dbo.FactFinance exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimOrganization  dbo.DimOrganization on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimOrganization"
    CHILD_OWNER="dbo", CHILD_TABLE="DimOrganization"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimOrganization_DimOrganization", FK_COLUMNS="ParentOrganizationKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(OrganizationKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimOrganization
      WHERE
        /*  %JoinFKPK(dbo.DimOrganization,deleted," = "," AND") */
        dbo.DimOrganization.ParentOrganizationKey = deleted.OrganizationKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimOrganization because dbo.DimOrganization exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimOrganization  dbo.DimOrganization on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimOrganization"
    CHILD_OWNER="dbo", CHILD_TABLE="DimOrganization"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimOrganization_DimOrganization", FK_COLUMNS="ParentOrganizationKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ParentOrganizationKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimOrganization
        WHERE
          /* %JoinFKPK(inserted,dbo.DimOrganization) */
          inserted.ParentOrganizationKey = dbo.DimOrganization.OrganizationKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ParentOrganizationKey IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.DimOrganization because dbo.DimOrganization does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimCurrency  dbo.DimOrganization on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="DimOrganization"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimOrganization_DimCurrency", FK_COLUMNS="CurrencyKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CurrencyKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimCurrency
        WHERE
          /* %JoinFKPK(inserted,dbo.DimCurrency) */
          inserted.CurrencyKey = dbo.DimCurrency.CurrencyKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.CurrencyKey IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.DimOrganization because dbo.DimCurrency does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimProduct ON dbo.DimProduct FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimProduct */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimProduct  dbo.FactResellerSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00052338", PARENT_OWNER="dbo", PARENT_TABLE="DimProduct"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimProduct", FK_COLUMNS="ProductKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.ProductKey = deleted.ProductKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimProduct because dbo.FactResellerSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimProduct  dbo.FactProductInventory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimProduct"
    CHILD_OWNER="dbo", CHILD_TABLE="FactProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactProductInventory_DimProduct", FK_COLUMNS="ProductKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactProductInventory
      WHERE
        /*  %JoinFKPK(dbo.FactProductInventory,deleted," = "," AND") */
        dbo.FactProductInventory.ProductKey = deleted.ProductKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimProduct because dbo.FactProductInventory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimProduct  dbo.FactInternetSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimProduct"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimProduct", FK_COLUMNS="ProductKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.ProductKey = deleted.ProductKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimProduct because dbo.FactInternetSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimProductSubcategory  dbo.DimProduct on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimProductSubcategory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimProduct_DimProductSubcategory", FK_COLUMNS="ProductSubcategoryKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimProductSubcategory
      WHERE
        /* %JoinFKPK(deleted,dbo.DimProductSubcategory," = "," AND") */
        deleted.ProductSubcategoryKey = dbo.DimProductSubcategory.ProductSubcategoryKey AND
        NOT EXISTS (
          SELECT * FROM dbo.DimProduct
          WHERE
            /* %JoinFKPK(dbo.DimProduct,dbo.DimProductSubcategory," = "," AND") */
            dbo.DimProduct.ProductSubcategoryKey = dbo.DimProductSubcategory.ProductSubcategoryKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.DimProduct because dbo.DimProductSubcategory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimProduct ON dbo.DimProduct FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimProduct */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimProduct  dbo.FactResellerSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0005b10a", PARENT_OWNER="dbo", PARENT_TABLE="DimProduct"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimProduct", FK_COLUMNS="ProductKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.ProductKey = deleted.ProductKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimProduct because dbo.FactResellerSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimProduct  dbo.FactProductInventory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimProduct"
    CHILD_OWNER="dbo", CHILD_TABLE="FactProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactProductInventory_DimProduct", FK_COLUMNS="ProductKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactProductInventory
      WHERE
        /*  %JoinFKPK(dbo.FactProductInventory,deleted," = "," AND") */
        dbo.FactProductInventory.ProductKey = deleted.ProductKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimProduct because dbo.FactProductInventory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimProduct  dbo.FactInternetSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimProduct"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimProduct", FK_COLUMNS="ProductKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.ProductKey = deleted.ProductKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimProduct because dbo.FactInternetSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimProductSubcategory  dbo.DimProduct on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimProductSubcategory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimProduct_DimProductSubcategory", FK_COLUMNS="ProductSubcategoryKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductSubcategoryKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimProductSubcategory
        WHERE
          /* %JoinFKPK(inserted,dbo.DimProductSubcategory) */
          inserted.ProductSubcategoryKey = dbo.DimProductSubcategory.ProductSubcategoryKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ProductSubcategoryKey IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.DimProduct because dbo.DimProductSubcategory does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimProductCategory ON dbo.DimProductCategory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimProductCategory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimProductCategory  dbo.DimProductSubcategory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00016e1d", PARENT_OWNER="dbo", PARENT_TABLE="DimProductCategory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimProductSubcategory_DimProductCategory", FK_COLUMNS="ProductCategoryKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimProductSubcategory
      WHERE
        /*  %JoinFKPK(dbo.DimProductSubcategory,deleted," = "," AND") */
        dbo.DimProductSubcategory.ProductCategoryKey = deleted.ProductCategoryKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimProductCategory because dbo.DimProductSubcategory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimProductCategory ON dbo.DimProductCategory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimProductCategory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductCategoryKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimProductCategory  dbo.DimProductSubcategory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00018b2a", PARENT_OWNER="dbo", PARENT_TABLE="DimProductCategory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimProductSubcategory_DimProductCategory", FK_COLUMNS="ProductCategoryKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductCategoryKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimProductSubcategory
      WHERE
        /*  %JoinFKPK(dbo.DimProductSubcategory,deleted," = "," AND") */
        dbo.DimProductSubcategory.ProductCategoryKey = deleted.ProductCategoryKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimProductCategory because dbo.DimProductSubcategory exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimProductSubcategory ON dbo.DimProductSubcategory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimProductSubcategory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimProductSubcategory  dbo.DimProduct on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002f1da", PARENT_OWNER="dbo", PARENT_TABLE="DimProductSubcategory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimProduct_DimProductSubcategory", FK_COLUMNS="ProductSubcategoryKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimProduct
      WHERE
        /*  %JoinFKPK(dbo.DimProduct,deleted," = "," AND") */
        dbo.DimProduct.ProductSubcategoryKey = deleted.ProductSubcategoryKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimProductSubcategory because dbo.DimProduct exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimProductCategory  dbo.DimProductSubcategory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimProductCategory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimProductSubcategory_DimProductCategory", FK_COLUMNS="ProductCategoryKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimProductCategory
      WHERE
        /* %JoinFKPK(deleted,dbo.DimProductCategory," = "," AND") */
        deleted.ProductCategoryKey = dbo.DimProductCategory.ProductCategoryKey AND
        NOT EXISTS (
          SELECT * FROM dbo.DimProductSubcategory
          WHERE
            /* %JoinFKPK(dbo.DimProductSubcategory,dbo.DimProductCategory," = "," AND") */
            dbo.DimProductSubcategory.ProductCategoryKey = dbo.DimProductCategory.ProductCategoryKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.DimProductSubcategory because dbo.DimProductCategory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimProductSubcategory ON dbo.DimProductSubcategory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimProductSubcategory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductSubcategoryKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimProductSubcategory  dbo.DimProduct on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000339c6", PARENT_OWNER="dbo", PARENT_TABLE="DimProductSubcategory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimProduct_DimProductSubcategory", FK_COLUMNS="ProductSubcategoryKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductSubcategoryKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimProduct
      WHERE
        /*  %JoinFKPK(dbo.DimProduct,deleted," = "," AND") */
        dbo.DimProduct.ProductSubcategoryKey = deleted.ProductSubcategoryKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimProductSubcategory because dbo.DimProduct exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimProductCategory  dbo.DimProductSubcategory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimProductCategory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimProductSubcategory_DimProductCategory", FK_COLUMNS="ProductCategoryKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductCategoryKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimProductCategory
        WHERE
          /* %JoinFKPK(inserted,dbo.DimProductCategory) */
          inserted.ProductCategoryKey = dbo.DimProductCategory.ProductCategoryKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ProductCategoryKey IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.DimProductSubcategory because dbo.DimProductCategory does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimPromotion ON dbo.DimPromotion FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimPromotion */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimPromotion  dbo.FactResellerSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00027d58", PARENT_OWNER="dbo", PARENT_TABLE="DimPromotion"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimPromotion", FK_COLUMNS="PromotionKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.PromotionKey = deleted.PromotionKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimPromotion because dbo.FactResellerSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimPromotion  dbo.FactInternetSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimPromotion"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimPromotion", FK_COLUMNS="PromotionKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.PromotionKey = deleted.PromotionKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimPromotion because dbo.FactInternetSales exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimPromotion ON dbo.DimPromotion FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimPromotion */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPromotionKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimPromotion  dbo.FactResellerSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002adb5", PARENT_OWNER="dbo", PARENT_TABLE="DimPromotion"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimPromotion", FK_COLUMNS="PromotionKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(PromotionKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.PromotionKey = deleted.PromotionKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimPromotion because dbo.FactResellerSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimPromotion  dbo.FactInternetSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimPromotion"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimPromotion", FK_COLUMNS="PromotionKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(PromotionKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.PromotionKey = deleted.PromotionKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimPromotion because dbo.FactInternetSales exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimReseller ON dbo.DimReseller FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimReseller */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimReseller  dbo.FactResellerSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002ad4b", PARENT_OWNER="dbo", PARENT_TABLE="DimReseller"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimReseller", FK_COLUMNS="ResellerKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.ResellerKey = deleted.ResellerKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimReseller because dbo.FactResellerSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimGeography  dbo.DimReseller on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimGeography"
    CHILD_OWNER="dbo", CHILD_TABLE="DimReseller"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimReseller_DimGeography", FK_COLUMNS="GeographyKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimGeography
      WHERE
        /* %JoinFKPK(deleted,dbo.DimGeography," = "," AND") */
        deleted.GeographyKey = dbo.DimGeography.GeographyKey AND
        NOT EXISTS (
          SELECT * FROM dbo.DimReseller
          WHERE
            /* %JoinFKPK(dbo.DimReseller,dbo.DimGeography," = "," AND") */
            dbo.DimReseller.GeographyKey = dbo.DimGeography.GeographyKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.DimReseller because dbo.DimGeography exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimReseller ON dbo.DimReseller FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimReseller */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insResellerKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimReseller  dbo.FactResellerSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002fc80", PARENT_OWNER="dbo", PARENT_TABLE="DimReseller"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimReseller", FK_COLUMNS="ResellerKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ResellerKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.ResellerKey = deleted.ResellerKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimReseller because dbo.FactResellerSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimGeography  dbo.DimReseller on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimGeography"
    CHILD_OWNER="dbo", CHILD_TABLE="DimReseller"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimReseller_DimGeography", FK_COLUMNS="GeographyKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(GeographyKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimGeography
        WHERE
          /* %JoinFKPK(inserted,dbo.DimGeography) */
          inserted.GeographyKey = dbo.DimGeography.GeographyKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.GeographyKey IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.DimReseller because dbo.DimGeography does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimSalesReason ON dbo.DimSalesReason FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimSalesReason */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimSalesReason  dbo.FactInternetSalesReason on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001566b", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesReason"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSalesReason_DimSalesReason", FK_COLUMNS="SalesReasonKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSalesReason
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSalesReason,deleted," = "," AND") */
        dbo.FactInternetSalesReason.SalesReasonKey = deleted.SalesReasonKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimSalesReason because dbo.FactInternetSalesReason exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimSalesReason ON dbo.DimSalesReason FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimSalesReason */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesReasonKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimSalesReason  dbo.FactInternetSalesReason on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000174bd", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesReason"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSalesReason_DimSalesReason", FK_COLUMNS="SalesReasonKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SalesReasonKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSalesReason
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSalesReason,deleted," = "," AND") */
        dbo.FactInternetSalesReason.SalesReasonKey = deleted.SalesReasonKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimSalesReason because dbo.FactInternetSalesReason exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimSalesTerritory ON dbo.DimSalesTerritory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimSalesTerritory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimSalesTerritory  dbo.FactResellerSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004f443", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.SalesTerritoryKey = deleted.SalesTerritoryKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimSalesTerritory because dbo.FactResellerSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimSalesTerritory  dbo.FactInternetSales on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.SalesTerritoryKey = deleted.SalesTerritoryKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimSalesTerritory because dbo.FactInternetSales exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimSalesTerritory  dbo.DimGeography on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimGeography"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimGeography_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimGeography
      WHERE
        /*  %JoinFKPK(dbo.DimGeography,deleted," = "," AND") */
        dbo.DimGeography.SalesTerritoryKey = deleted.SalesTerritoryKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimSalesTerritory because dbo.DimGeography exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimSalesTerritory  dbo.DimEmployee on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimEmployee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimEmployee_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimEmployee
      WHERE
        /*  %JoinFKPK(dbo.DimEmployee,deleted," = "," AND") */
        dbo.DimEmployee.SalesTerritoryKey = deleted.SalesTerritoryKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimSalesTerritory because dbo.DimEmployee exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimSalesTerritory ON dbo.DimSalesTerritory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimSalesTerritory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesTerritoryKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimSalesTerritory  dbo.FactResellerSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00056691", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SalesTerritoryKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactResellerSales
      WHERE
        /*  %JoinFKPK(dbo.FactResellerSales,deleted," = "," AND") */
        dbo.FactResellerSales.SalesTerritoryKey = deleted.SalesTerritoryKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimSalesTerritory because dbo.FactResellerSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimSalesTerritory  dbo.FactInternetSales on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SalesTerritoryKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSales,deleted," = "," AND") */
        dbo.FactInternetSales.SalesTerritoryKey = deleted.SalesTerritoryKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimSalesTerritory because dbo.FactInternetSales exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimSalesTerritory  dbo.DimGeography on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimGeography"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimGeography_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SalesTerritoryKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimGeography
      WHERE
        /*  %JoinFKPK(dbo.DimGeography,deleted," = "," AND") */
        dbo.DimGeography.SalesTerritoryKey = deleted.SalesTerritoryKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimSalesTerritory because dbo.DimGeography exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimSalesTerritory  dbo.DimEmployee on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="DimEmployee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_DimEmployee_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SalesTerritoryKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.DimEmployee
      WHERE
        /*  %JoinFKPK(dbo.DimEmployee,deleted," = "," AND") */
        dbo.DimEmployee.SalesTerritoryKey = deleted.SalesTerritoryKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimSalesTerritory because dbo.DimEmployee exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_DimScenario ON dbo.DimScenario FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on DimScenario */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimScenario  dbo.FactFinance on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000131e5", PARENT_OWNER="dbo", PARENT_TABLE="DimScenario"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimScenario", FK_COLUMNS="ScenarioKey" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactFinance
      WHERE
        /*  %JoinFKPK(dbo.FactFinance,deleted," = "," AND") */
        dbo.FactFinance.ScenarioKey = deleted.ScenarioKey
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.DimScenario because dbo.FactFinance exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_DimScenario ON dbo.DimScenario FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on DimScenario */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insScenarioKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimScenario  dbo.FactFinance on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00014ddf", PARENT_OWNER="dbo", PARENT_TABLE="DimScenario"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimScenario", FK_COLUMNS="ScenarioKey" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ScenarioKey)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactFinance
      WHERE
        /*  %JoinFKPK(dbo.FactFinance,deleted," = "," AND") */
        dbo.FactFinance.ScenarioKey = deleted.ScenarioKey
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.DimScenario because dbo.FactFinance exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_FactCallCenter ON dbo.FactCallCenter FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on FactCallCenter */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactCallCenter on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00016b48", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactCallCenter"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactCallCenter_DimDate", FK_COLUMNS="DateKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDate
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDate," = "," AND") */
        deleted.DateKey = dbo.DimDate.DateKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactCallCenter
          WHERE
            /* %JoinFKPK(dbo.FactCallCenter,dbo.DimDate," = "," AND") */
            dbo.FactCallCenter.DateKey = dbo.DimDate.DateKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactCallCenter because dbo.DimDate exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_FactCallCenter ON dbo.FactCallCenter FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on FactCallCenter */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insFactCallCenterID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactCallCenter on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00016f71", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactCallCenter"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactCallCenter_DimDate", FK_COLUMNS="DateKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDate
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDate) */
          inserted.DateKey = dbo.DimDate.DateKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactCallCenter because dbo.DimDate does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_FactCurrencyRate ON dbo.FactCurrencyRate FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on FactCurrencyRate */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimCurrency  dbo.FactCurrencyRate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002efc4", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="FactCurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactCurrencyRate_DimCurrency", FK_COLUMNS="CurrencyKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimCurrency
      WHERE
        /* %JoinFKPK(deleted,dbo.DimCurrency," = "," AND") */
        deleted.CurrencyKey = dbo.DimCurrency.CurrencyKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactCurrencyRate
          WHERE
            /* %JoinFKPK(dbo.FactCurrencyRate,dbo.DimCurrency," = "," AND") */
            dbo.FactCurrencyRate.CurrencyKey = dbo.DimCurrency.CurrencyKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactCurrencyRate because dbo.DimCurrency exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactCurrencyRate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactCurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactCurrencyRate_DimDate", FK_COLUMNS="DateKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDate
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDate," = "," AND") */
        deleted.DateKey = dbo.DimDate.DateKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactCurrencyRate
          WHERE
            /* %JoinFKPK(dbo.FactCurrencyRate,dbo.DimDate," = "," AND") */
            dbo.FactCurrencyRate.DateKey = dbo.DimDate.DateKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactCurrencyRate because dbo.DimDate exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_FactCurrencyRate ON dbo.FactCurrencyRate FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on FactCurrencyRate */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCurrencyKey int, 
           @insDateKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimCurrency  dbo.FactCurrencyRate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0002ee02", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="FactCurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactCurrencyRate_DimCurrency", FK_COLUMNS="CurrencyKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CurrencyKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimCurrency
        WHERE
          /* %JoinFKPK(inserted,dbo.DimCurrency) */
          inserted.CurrencyKey = dbo.DimCurrency.CurrencyKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactCurrencyRate because dbo.DimCurrency does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactCurrencyRate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactCurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactCurrencyRate_DimDate", FK_COLUMNS="DateKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDate
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDate) */
          inserted.DateKey = dbo.DimDate.DateKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactCurrencyRate because dbo.DimDate does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_FactFinance ON dbo.FactFinance FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on FactFinance */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimAccount  dbo.FactFinance on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00073b1c", PARENT_OWNER="dbo", PARENT_TABLE="DimAccount"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimAccount", FK_COLUMNS="AccountKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimAccount
      WHERE
        /* %JoinFKPK(deleted,dbo.DimAccount," = "," AND") */
        deleted.AccountKey = dbo.DimAccount.AccountKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactFinance
          WHERE
            /* %JoinFKPK(dbo.FactFinance,dbo.DimAccount," = "," AND") */
            dbo.FactFinance.AccountKey = dbo.DimAccount.AccountKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactFinance because dbo.DimAccount exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactFinance on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimDate", FK_COLUMNS="DateKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDate
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDate," = "," AND") */
        deleted.DateKey = dbo.DimDate.DateKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactFinance
          WHERE
            /* %JoinFKPK(dbo.FactFinance,dbo.DimDate," = "," AND") */
            dbo.FactFinance.DateKey = dbo.DimDate.DateKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactFinance because dbo.DimDate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDepartmentGroup  dbo.FactFinance on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDepartmentGroup"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimDepartmentGroup", FK_COLUMNS="DepartmentGroupKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDepartmentGroup
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDepartmentGroup," = "," AND") */
        deleted.DepartmentGroupKey = dbo.DimDepartmentGroup.DepartmentGroupKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactFinance
          WHERE
            /* %JoinFKPK(dbo.FactFinance,dbo.DimDepartmentGroup," = "," AND") */
            dbo.FactFinance.DepartmentGroupKey = dbo.DimDepartmentGroup.DepartmentGroupKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactFinance because dbo.DimDepartmentGroup exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimOrganization  dbo.FactFinance on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimOrganization"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimOrganization", FK_COLUMNS="OrganizationKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimOrganization
      WHERE
        /* %JoinFKPK(deleted,dbo.DimOrganization," = "," AND") */
        deleted.OrganizationKey = dbo.DimOrganization.OrganizationKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactFinance
          WHERE
            /* %JoinFKPK(dbo.FactFinance,dbo.DimOrganization," = "," AND") */
            dbo.FactFinance.OrganizationKey = dbo.DimOrganization.OrganizationKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactFinance because dbo.DimOrganization exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimScenario  dbo.FactFinance on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimScenario"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimScenario", FK_COLUMNS="ScenarioKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimScenario
      WHERE
        /* %JoinFKPK(deleted,dbo.DimScenario," = "," AND") */
        deleted.ScenarioKey = dbo.DimScenario.ScenarioKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactFinance
          WHERE
            /* %JoinFKPK(dbo.FactFinance,dbo.DimScenario," = "," AND") */
            dbo.FactFinance.ScenarioKey = dbo.DimScenario.ScenarioKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactFinance because dbo.DimScenario exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_FactFinance ON dbo.FactFinance FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on FactFinance */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimAccount  dbo.FactFinance on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0007566f", PARENT_OWNER="dbo", PARENT_TABLE="DimAccount"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimAccount", FK_COLUMNS="AccountKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AccountKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimAccount
        WHERE
          /* %JoinFKPK(inserted,dbo.DimAccount) */
          inserted.AccountKey = dbo.DimAccount.AccountKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactFinance because dbo.DimAccount does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactFinance on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimDate", FK_COLUMNS="DateKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDate
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDate) */
          inserted.DateKey = dbo.DimDate.DateKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactFinance because dbo.DimDate does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDepartmentGroup  dbo.FactFinance on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDepartmentGroup"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimDepartmentGroup", FK_COLUMNS="DepartmentGroupKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DepartmentGroupKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDepartmentGroup
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDepartmentGroup) */
          inserted.DepartmentGroupKey = dbo.DimDepartmentGroup.DepartmentGroupKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactFinance because dbo.DimDepartmentGroup does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimOrganization  dbo.FactFinance on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimOrganization"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimOrganization", FK_COLUMNS="OrganizationKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(OrganizationKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimOrganization
        WHERE
          /* %JoinFKPK(inserted,dbo.DimOrganization) */
          inserted.OrganizationKey = dbo.DimOrganization.OrganizationKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactFinance because dbo.DimOrganization does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimScenario  dbo.FactFinance on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimScenario"
    CHILD_OWNER="dbo", CHILD_TABLE="FactFinance"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactFinance_DimScenario", FK_COLUMNS="ScenarioKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ScenarioKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimScenario
        WHERE
          /* %JoinFKPK(inserted,dbo.DimScenario) */
          inserted.ScenarioKey = dbo.DimScenario.ScenarioKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactFinance because dbo.DimScenario does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_FactInternetSales ON dbo.FactInternetSales FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on FactInternetSales */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.FactInternetSales  dbo.FactInternetSalesReason on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000d5c8c", PARENT_OWNER="dbo", PARENT_TABLE="FactInternetSales"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSalesReason_FactInternetSales", FK_COLUMNS="SalesOrderNumber""SalesOrderLineNumber" */
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSalesReason
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSalesReason,deleted," = "," AND") */
        dbo.FactInternetSalesReason.SalesOrderNumber = deleted.SalesOrderNumber AND
        dbo.FactInternetSalesReason.SalesOrderLineNumber = deleted.SalesOrderLineNumber
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete dbo.FactInternetSales because dbo.FactInternetSalesReason exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimSalesTerritory  dbo.FactInternetSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimSalesTerritory
      WHERE
        /* %JoinFKPK(deleted,dbo.DimSalesTerritory," = "," AND") */
        deleted.SalesTerritoryKey = dbo.DimSalesTerritory.SalesTerritoryKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactInternetSales
          WHERE
            /* %JoinFKPK(dbo.FactInternetSales,dbo.DimSalesTerritory," = "," AND") */
            dbo.FactInternetSales.SalesTerritoryKey = dbo.DimSalesTerritory.SalesTerritoryKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactInternetSales because dbo.DimSalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimPromotion  dbo.FactInternetSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimPromotion"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimPromotion", FK_COLUMNS="PromotionKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimPromotion
      WHERE
        /* %JoinFKPK(deleted,dbo.DimPromotion," = "," AND") */
        deleted.PromotionKey = dbo.DimPromotion.PromotionKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactInternetSales
          WHERE
            /* %JoinFKPK(dbo.FactInternetSales,dbo.DimPromotion," = "," AND") */
            dbo.FactInternetSales.PromotionKey = dbo.DimPromotion.PromotionKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactInternetSales because dbo.DimPromotion exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimProduct  dbo.FactInternetSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimProduct"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimProduct", FK_COLUMNS="ProductKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimProduct
      WHERE
        /* %JoinFKPK(deleted,dbo.DimProduct," = "," AND") */
        deleted.ProductKey = dbo.DimProduct.ProductKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactInternetSales
          WHERE
            /* %JoinFKPK(dbo.FactInternetSales,dbo.DimProduct," = "," AND") */
            dbo.FactInternetSales.ProductKey = dbo.DimProduct.ProductKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactInternetSales because dbo.DimProduct exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactInternetSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimDate2", FK_COLUMNS="ShipDateKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDate
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDate," = "," AND") */
        deleted.ShipDateKey = dbo.DimDate.DateKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactInternetSales
          WHERE
            /* %JoinFKPK(dbo.FactInternetSales,dbo.DimDate," = "," AND") */
            dbo.FactInternetSales.ShipDateKey = dbo.DimDate.DateKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactInternetSales because dbo.DimDate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactInternetSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimDate1", FK_COLUMNS="DueDateKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDate
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDate," = "," AND") */
        deleted.DueDateKey = dbo.DimDate.DateKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactInternetSales
          WHERE
            /* %JoinFKPK(dbo.FactInternetSales,dbo.DimDate," = "," AND") */
            dbo.FactInternetSales.DueDateKey = dbo.DimDate.DateKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactInternetSales because dbo.DimDate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactInternetSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimDate", FK_COLUMNS="OrderDateKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDate
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDate," = "," AND") */
        deleted.OrderDateKey = dbo.DimDate.DateKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactInternetSales
          WHERE
            /* %JoinFKPK(dbo.FactInternetSales,dbo.DimDate," = "," AND") */
            dbo.FactInternetSales.OrderDateKey = dbo.DimDate.DateKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactInternetSales because dbo.DimDate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimCustomer  dbo.FactInternetSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCustomer"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimCustomer", FK_COLUMNS="CustomerKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimCustomer
      WHERE
        /* %JoinFKPK(deleted,dbo.DimCustomer," = "," AND") */
        deleted.CustomerKey = dbo.DimCustomer.CustomerKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactInternetSales
          WHERE
            /* %JoinFKPK(dbo.FactInternetSales,dbo.DimCustomer," = "," AND") */
            dbo.FactInternetSales.CustomerKey = dbo.DimCustomer.CustomerKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactInternetSales because dbo.DimCustomer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimCurrency  dbo.FactInternetSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimCurrency", FK_COLUMNS="CurrencyKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimCurrency
      WHERE
        /* %JoinFKPK(deleted,dbo.DimCurrency," = "," AND") */
        deleted.CurrencyKey = dbo.DimCurrency.CurrencyKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactInternetSales
          WHERE
            /* %JoinFKPK(dbo.FactInternetSales,dbo.DimCurrency," = "," AND") */
            dbo.FactInternetSales.CurrencyKey = dbo.DimCurrency.CurrencyKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactInternetSales because dbo.DimCurrency exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_FactInternetSales ON dbo.FactInternetSales FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on FactInternetSales */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderNumber nvarchar(20), 
           @insSalesOrderLineNumber tinyint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.FactInternetSales  dbo.FactInternetSalesReason on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000d856c", PARENT_OWNER="dbo", PARENT_TABLE="FactInternetSales"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSalesReason_FactInternetSales", FK_COLUMNS="SalesOrderNumber""SalesOrderLineNumber" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SalesOrderNumber) OR
    UPDATE(SalesOrderLineNumber)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,dbo.FactInternetSalesReason
      WHERE
        /*  %JoinFKPK(dbo.FactInternetSalesReason,deleted," = "," AND") */
        dbo.FactInternetSalesReason.SalesOrderNumber = deleted.SalesOrderNumber AND
        dbo.FactInternetSalesReason.SalesOrderLineNumber = deleted.SalesOrderLineNumber
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update dbo.FactInternetSales because dbo.FactInternetSalesReason exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimSalesTerritory  dbo.FactInternetSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesTerritoryKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimSalesTerritory
        WHERE
          /* %JoinFKPK(inserted,dbo.DimSalesTerritory) */
          inserted.SalesTerritoryKey = dbo.DimSalesTerritory.SalesTerritoryKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactInternetSales because dbo.DimSalesTerritory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimPromotion  dbo.FactInternetSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimPromotion"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimPromotion", FK_COLUMNS="PromotionKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PromotionKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimPromotion
        WHERE
          /* %JoinFKPK(inserted,dbo.DimPromotion) */
          inserted.PromotionKey = dbo.DimPromotion.PromotionKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactInternetSales because dbo.DimPromotion does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimProduct  dbo.FactInternetSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimProduct"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimProduct", FK_COLUMNS="ProductKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimProduct
        WHERE
          /* %JoinFKPK(inserted,dbo.DimProduct) */
          inserted.ProductKey = dbo.DimProduct.ProductKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactInternetSales because dbo.DimProduct does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactInternetSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimDate2", FK_COLUMNS="ShipDateKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ShipDateKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDate
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDate) */
          inserted.ShipDateKey = dbo.DimDate.DateKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactInternetSales because dbo.DimDate does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactInternetSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimDate1", FK_COLUMNS="DueDateKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DueDateKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDate
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDate) */
          inserted.DueDateKey = dbo.DimDate.DateKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactInternetSales because dbo.DimDate does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactInternetSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimDate", FK_COLUMNS="OrderDateKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(OrderDateKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDate
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDate) */
          inserted.OrderDateKey = dbo.DimDate.DateKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactInternetSales because dbo.DimDate does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimCustomer  dbo.FactInternetSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCustomer"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimCustomer", FK_COLUMNS="CustomerKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CustomerKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimCustomer
        WHERE
          /* %JoinFKPK(inserted,dbo.DimCustomer) */
          inserted.CustomerKey = dbo.DimCustomer.CustomerKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactInternetSales because dbo.DimCustomer does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimCurrency  dbo.FactInternetSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSales_DimCurrency", FK_COLUMNS="CurrencyKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CurrencyKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimCurrency
        WHERE
          /* %JoinFKPK(inserted,dbo.DimCurrency) */
          inserted.CurrencyKey = dbo.DimCurrency.CurrencyKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactInternetSales because dbo.DimCurrency does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_FactInternetSalesReason ON dbo.FactInternetSalesReason FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on FactInternetSalesReason */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimSalesReason  dbo.FactInternetSalesReason on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003d002", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesReason"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSalesReason_DimSalesReason", FK_COLUMNS="SalesReasonKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimSalesReason
      WHERE
        /* %JoinFKPK(deleted,dbo.DimSalesReason," = "," AND") */
        deleted.SalesReasonKey = dbo.DimSalesReason.SalesReasonKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactInternetSalesReason
          WHERE
            /* %JoinFKPK(dbo.FactInternetSalesReason,dbo.DimSalesReason," = "," AND") */
            dbo.FactInternetSalesReason.SalesReasonKey = dbo.DimSalesReason.SalesReasonKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactInternetSalesReason because dbo.DimSalesReason exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.FactInternetSales  dbo.FactInternetSalesReason on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="FactInternetSales"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSalesReason_FactInternetSales", FK_COLUMNS="SalesOrderNumber""SalesOrderLineNumber" */
    IF EXISTS (SELECT * FROM deleted,dbo.FactInternetSales
      WHERE
        /* %JoinFKPK(deleted,dbo.FactInternetSales," = "," AND") */
        deleted.SalesOrderNumber = dbo.FactInternetSales.SalesOrderNumber AND
        deleted.SalesOrderLineNumber = dbo.FactInternetSales.SalesOrderLineNumber AND
        NOT EXISTS (
          SELECT * FROM dbo.FactInternetSalesReason
          WHERE
            /* %JoinFKPK(dbo.FactInternetSalesReason,dbo.FactInternetSales," = "," AND") */
            dbo.FactInternetSalesReason.SalesOrderNumber = dbo.FactInternetSales.SalesOrderNumber AND
            dbo.FactInternetSalesReason.SalesOrderLineNumber = dbo.FactInternetSales.SalesOrderLineNumber
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactInternetSalesReason because dbo.FactInternetSales exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_FactInternetSalesReason ON dbo.FactInternetSalesReason FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on FactInternetSalesReason */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderNumber nvarchar(20), 
           @insSalesOrderLineNumber tinyint, 
           @insSalesReasonKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimSalesReason  dbo.FactInternetSalesReason on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0003957c", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesReason"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSalesReason_DimSalesReason", FK_COLUMNS="SalesReasonKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesReasonKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimSalesReason
        WHERE
          /* %JoinFKPK(inserted,dbo.DimSalesReason) */
          inserted.SalesReasonKey = dbo.DimSalesReason.SalesReasonKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactInternetSalesReason because dbo.DimSalesReason does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.FactInternetSales  dbo.FactInternetSalesReason on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="FactInternetSales"
    CHILD_OWNER="dbo", CHILD_TABLE="FactInternetSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactInternetSalesReason_FactInternetSales", FK_COLUMNS="SalesOrderNumber""SalesOrderLineNumber" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesOrderNumber) OR
    UPDATE(SalesOrderLineNumber)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.FactInternetSales
        WHERE
          /* %JoinFKPK(inserted,dbo.FactInternetSales) */
          inserted.SalesOrderNumber = dbo.FactInternetSales.SalesOrderNumber and
          inserted.SalesOrderLineNumber = dbo.FactInternetSales.SalesOrderLineNumber
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactInternetSalesReason because dbo.FactInternetSales does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_FactProductInventory ON dbo.FactProductInventory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on FactProductInventory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimProduct  dbo.FactProductInventory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00030721", PARENT_OWNER="dbo", PARENT_TABLE="DimProduct"
    CHILD_OWNER="dbo", CHILD_TABLE="FactProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactProductInventory_DimProduct", FK_COLUMNS="ProductKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimProduct
      WHERE
        /* %JoinFKPK(deleted,dbo.DimProduct," = "," AND") */
        deleted.ProductKey = dbo.DimProduct.ProductKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactProductInventory
          WHERE
            /* %JoinFKPK(dbo.FactProductInventory,dbo.DimProduct," = "," AND") */
            dbo.FactProductInventory.ProductKey = dbo.DimProduct.ProductKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactProductInventory because dbo.DimProduct exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactProductInventory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactProductInventory_DimDate", FK_COLUMNS="DateKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDate
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDate," = "," AND") */
        deleted.DateKey = dbo.DimDate.DateKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactProductInventory
          WHERE
            /* %JoinFKPK(dbo.FactProductInventory,dbo.DimDate," = "," AND") */
            dbo.FactProductInventory.DateKey = dbo.DimDate.DateKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactProductInventory because dbo.DimDate exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_FactProductInventory ON dbo.FactProductInventory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on FactProductInventory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductKey int, 
           @insDateKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimProduct  dbo.FactProductInventory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000302fd", PARENT_OWNER="dbo", PARENT_TABLE="DimProduct"
    CHILD_OWNER="dbo", CHILD_TABLE="FactProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactProductInventory_DimProduct", FK_COLUMNS="ProductKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimProduct
        WHERE
          /* %JoinFKPK(inserted,dbo.DimProduct) */
          inserted.ProductKey = dbo.DimProduct.ProductKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactProductInventory because dbo.DimProduct does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactProductInventory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactProductInventory_DimDate", FK_COLUMNS="DateKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDate
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDate) */
          inserted.DateKey = dbo.DimDate.DateKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactProductInventory because dbo.DimDate does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_FactResellerSales ON dbo.FactResellerSales FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on FactResellerSales */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimSalesTerritory  dbo.FactResellerSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000d3e3e", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimSalesTerritory
      WHERE
        /* %JoinFKPK(deleted,dbo.DimSalesTerritory," = "," AND") */
        deleted.SalesTerritoryKey = dbo.DimSalesTerritory.SalesTerritoryKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactResellerSales
          WHERE
            /* %JoinFKPK(dbo.FactResellerSales,dbo.DimSalesTerritory," = "," AND") */
            dbo.FactResellerSales.SalesTerritoryKey = dbo.DimSalesTerritory.SalesTerritoryKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactResellerSales because dbo.DimSalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimReseller  dbo.FactResellerSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimReseller"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimReseller", FK_COLUMNS="ResellerKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimReseller
      WHERE
        /* %JoinFKPK(deleted,dbo.DimReseller," = "," AND") */
        deleted.ResellerKey = dbo.DimReseller.ResellerKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactResellerSales
          WHERE
            /* %JoinFKPK(dbo.FactResellerSales,dbo.DimReseller," = "," AND") */
            dbo.FactResellerSales.ResellerKey = dbo.DimReseller.ResellerKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactResellerSales because dbo.DimReseller exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimPromotion  dbo.FactResellerSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimPromotion"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimPromotion", FK_COLUMNS="PromotionKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimPromotion
      WHERE
        /* %JoinFKPK(deleted,dbo.DimPromotion," = "," AND") */
        deleted.PromotionKey = dbo.DimPromotion.PromotionKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactResellerSales
          WHERE
            /* %JoinFKPK(dbo.FactResellerSales,dbo.DimPromotion," = "," AND") */
            dbo.FactResellerSales.PromotionKey = dbo.DimPromotion.PromotionKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactResellerSales because dbo.DimPromotion exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimProduct  dbo.FactResellerSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimProduct"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimProduct", FK_COLUMNS="ProductKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimProduct
      WHERE
        /* %JoinFKPK(deleted,dbo.DimProduct," = "," AND") */
        deleted.ProductKey = dbo.DimProduct.ProductKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactResellerSales
          WHERE
            /* %JoinFKPK(dbo.FactResellerSales,dbo.DimProduct," = "," AND") */
            dbo.FactResellerSales.ProductKey = dbo.DimProduct.ProductKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactResellerSales because dbo.DimProduct exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimEmployee  dbo.FactResellerSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimEmployee"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimEmployee", FK_COLUMNS="EmployeeKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimEmployee
      WHERE
        /* %JoinFKPK(deleted,dbo.DimEmployee," = "," AND") */
        deleted.EmployeeKey = dbo.DimEmployee.EmployeeKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactResellerSales
          WHERE
            /* %JoinFKPK(dbo.FactResellerSales,dbo.DimEmployee," = "," AND") */
            dbo.FactResellerSales.EmployeeKey = dbo.DimEmployee.EmployeeKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactResellerSales because dbo.DimEmployee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactResellerSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimDate2", FK_COLUMNS="ShipDateKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDate
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDate," = "," AND") */
        deleted.ShipDateKey = dbo.DimDate.DateKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactResellerSales
          WHERE
            /* %JoinFKPK(dbo.FactResellerSales,dbo.DimDate," = "," AND") */
            dbo.FactResellerSales.ShipDateKey = dbo.DimDate.DateKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactResellerSales because dbo.DimDate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactResellerSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimDate1", FK_COLUMNS="DueDateKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDate
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDate," = "," AND") */
        deleted.DueDateKey = dbo.DimDate.DateKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactResellerSales
          WHERE
            /* %JoinFKPK(dbo.FactResellerSales,dbo.DimDate," = "," AND") */
            dbo.FactResellerSales.DueDateKey = dbo.DimDate.DateKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactResellerSales because dbo.DimDate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactResellerSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimDate", FK_COLUMNS="OrderDateKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDate
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDate," = "," AND") */
        deleted.OrderDateKey = dbo.DimDate.DateKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactResellerSales
          WHERE
            /* %JoinFKPK(dbo.FactResellerSales,dbo.DimDate," = "," AND") */
            dbo.FactResellerSales.OrderDateKey = dbo.DimDate.DateKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactResellerSales because dbo.DimDate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimCurrency  dbo.FactResellerSales on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimCurrency", FK_COLUMNS="CurrencyKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimCurrency
      WHERE
        /* %JoinFKPK(deleted,dbo.DimCurrency," = "," AND") */
        deleted.CurrencyKey = dbo.DimCurrency.CurrencyKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactResellerSales
          WHERE
            /* %JoinFKPK(dbo.FactResellerSales,dbo.DimCurrency," = "," AND") */
            dbo.FactResellerSales.CurrencyKey = dbo.DimCurrency.CurrencyKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactResellerSales because dbo.DimCurrency exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_FactResellerSales ON dbo.FactResellerSales FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on FactResellerSales */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderNumber nvarchar(20), 
           @insSalesOrderLineNumber tinyint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimSalesTerritory  dbo.FactResellerSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000d858f", PARENT_OWNER="dbo", PARENT_TABLE="DimSalesTerritory"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimSalesTerritory", FK_COLUMNS="SalesTerritoryKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesTerritoryKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimSalesTerritory
        WHERE
          /* %JoinFKPK(inserted,dbo.DimSalesTerritory) */
          inserted.SalesTerritoryKey = dbo.DimSalesTerritory.SalesTerritoryKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactResellerSales because dbo.DimSalesTerritory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimReseller  dbo.FactResellerSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimReseller"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimReseller", FK_COLUMNS="ResellerKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ResellerKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimReseller
        WHERE
          /* %JoinFKPK(inserted,dbo.DimReseller) */
          inserted.ResellerKey = dbo.DimReseller.ResellerKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactResellerSales because dbo.DimReseller does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimPromotion  dbo.FactResellerSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimPromotion"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimPromotion", FK_COLUMNS="PromotionKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PromotionKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimPromotion
        WHERE
          /* %JoinFKPK(inserted,dbo.DimPromotion) */
          inserted.PromotionKey = dbo.DimPromotion.PromotionKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactResellerSales because dbo.DimPromotion does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimProduct  dbo.FactResellerSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimProduct"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimProduct", FK_COLUMNS="ProductKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimProduct
        WHERE
          /* %JoinFKPK(inserted,dbo.DimProduct) */
          inserted.ProductKey = dbo.DimProduct.ProductKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactResellerSales because dbo.DimProduct does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimEmployee  dbo.FactResellerSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimEmployee"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimEmployee", FK_COLUMNS="EmployeeKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(EmployeeKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimEmployee
        WHERE
          /* %JoinFKPK(inserted,dbo.DimEmployee) */
          inserted.EmployeeKey = dbo.DimEmployee.EmployeeKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactResellerSales because dbo.DimEmployee does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactResellerSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimDate2", FK_COLUMNS="ShipDateKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ShipDateKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDate
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDate) */
          inserted.ShipDateKey = dbo.DimDate.DateKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactResellerSales because dbo.DimDate does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactResellerSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimDate1", FK_COLUMNS="DueDateKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DueDateKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDate
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDate) */
          inserted.DueDateKey = dbo.DimDate.DateKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactResellerSales because dbo.DimDate does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactResellerSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimDate", FK_COLUMNS="OrderDateKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(OrderDateKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDate
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDate) */
          inserted.OrderDateKey = dbo.DimDate.DateKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactResellerSales because dbo.DimDate does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimCurrency  dbo.FactResellerSales on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimCurrency"
    CHILD_OWNER="dbo", CHILD_TABLE="FactResellerSales"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactResellerSales_DimCurrency", FK_COLUMNS="CurrencyKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CurrencyKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimCurrency
        WHERE
          /* %JoinFKPK(inserted,dbo.DimCurrency) */
          inserted.CurrencyKey = dbo.DimCurrency.CurrencyKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactResellerSales because dbo.DimCurrency does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_FactSalesQuota ON dbo.FactSalesQuota FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on FactSalesQuota */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactSalesQuota on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002d9ea", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSalesQuota"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSalesQuota_DimDate", FK_COLUMNS="DateKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDate
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDate," = "," AND") */
        deleted.DateKey = dbo.DimDate.DateKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactSalesQuota
          WHERE
            /* %JoinFKPK(dbo.FactSalesQuota,dbo.DimDate," = "," AND") */
            dbo.FactSalesQuota.DateKey = dbo.DimDate.DateKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactSalesQuota because dbo.DimDate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimEmployee  dbo.FactSalesQuota on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimEmployee"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSalesQuota"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSalesQuota_DimEmployee", FK_COLUMNS="EmployeeKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimEmployee
      WHERE
        /* %JoinFKPK(deleted,dbo.DimEmployee," = "," AND") */
        deleted.EmployeeKey = dbo.DimEmployee.EmployeeKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactSalesQuota
          WHERE
            /* %JoinFKPK(dbo.FactSalesQuota,dbo.DimEmployee," = "," AND") */
            dbo.FactSalesQuota.EmployeeKey = dbo.DimEmployee.EmployeeKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactSalesQuota because dbo.DimEmployee exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_FactSalesQuota ON dbo.FactSalesQuota FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on FactSalesQuota */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesQuotaKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactSalesQuota on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00030115", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSalesQuota"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSalesQuota_DimDate", FK_COLUMNS="DateKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDate
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDate) */
          inserted.DateKey = dbo.DimDate.DateKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactSalesQuota because dbo.DimDate does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimEmployee  dbo.FactSalesQuota on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimEmployee"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSalesQuota"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSalesQuota_DimEmployee", FK_COLUMNS="EmployeeKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(EmployeeKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimEmployee
        WHERE
          /* %JoinFKPK(inserted,dbo.DimEmployee) */
          inserted.EmployeeKey = dbo.DimEmployee.EmployeeKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactSalesQuota because dbo.DimEmployee does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tD_FactSurveyResponse ON dbo.FactSurveyResponse FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on FactSurveyResponse */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* dbo.DimCustomer  dbo.FactSurveyResponse on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002f418", PARENT_OWNER="dbo", PARENT_TABLE="DimCustomer"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSurveyResponse"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSurveyResponse_CustomerKey", FK_COLUMNS="CustomerKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimCustomer
      WHERE
        /* %JoinFKPK(deleted,dbo.DimCustomer," = "," AND") */
        deleted.CustomerKey = dbo.DimCustomer.CustomerKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactSurveyResponse
          WHERE
            /* %JoinFKPK(dbo.FactSurveyResponse,dbo.DimCustomer," = "," AND") */
            dbo.FactSurveyResponse.CustomerKey = dbo.DimCustomer.CustomerKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactSurveyResponse because dbo.DimCustomer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* dbo.DimDate  dbo.FactSurveyResponse on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSurveyResponse"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSurveyResponse_DateKey", FK_COLUMNS="DateKey" */
    IF EXISTS (SELECT * FROM deleted,dbo.DimDate
      WHERE
        /* %JoinFKPK(deleted,dbo.DimDate," = "," AND") */
        deleted.DateKey = dbo.DimDate.DateKey AND
        NOT EXISTS (
          SELECT * FROM dbo.FactSurveyResponse
          WHERE
            /* %JoinFKPK(dbo.FactSurveyResponse,dbo.DimDate," = "," AND") */
            dbo.FactSurveyResponse.DateKey = dbo.DimDate.DateKey
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last dbo.FactSurveyResponse because dbo.DimDate exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER dbo.tU_FactSurveyResponse ON dbo.FactSurveyResponse FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on FactSurveyResponse */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSurveyResponseKey int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* dbo.DimCustomer  dbo.FactSurveyResponse on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00030df1", PARENT_OWNER="dbo", PARENT_TABLE="DimCustomer"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSurveyResponse"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSurveyResponse_CustomerKey", FK_COLUMNS="CustomerKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CustomerKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimCustomer
        WHERE
          /* %JoinFKPK(inserted,dbo.DimCustomer) */
          inserted.CustomerKey = dbo.DimCustomer.CustomerKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactSurveyResponse because dbo.DimCustomer does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* dbo.DimDate  dbo.FactSurveyResponse on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="dbo", PARENT_TABLE="DimDate"
    CHILD_OWNER="dbo", CHILD_TABLE="FactSurveyResponse"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_FactSurveyResponse_DateKey", FK_COLUMNS="DateKey" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DateKey)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,dbo.DimDate
        WHERE
          /* %JoinFKPK(inserted,dbo.DimDate) */
          inserted.DateKey = dbo.DimDate.DateKey
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update dbo.FactSurveyResponse because dbo.DimDate does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go






set quoted_identifier on
go

ALTER TABLE [dbo].[DimAccount]
ADD [DEMO]  char(18)  NULL
go
