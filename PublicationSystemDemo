
CREATE TYPE [SystemDate]
	FROM DATETIME NULL
go

CREATE TYPE [tid]
	FROM CHAR VARYING(6) NOT NULL
go

CREATE TYPE [empid]
	FROM CHAR(11) NOT NULL
go

CREATE TYPE [ZIP_CODE]
	FROM CHAR VARYING(9) NULL
go

CREATE TYPE [STREET_ADDRESS]
	FROM VARCHAR(25) NULL
go

CREATE TYPE [FIRST_NAME]
	FROM VARCHAR(15) NULL
go

CREATE TYPE [St]
	FROM CHAR VARYING(4) NOT NULL
go

CREATE TYPE [LAST_NAME]
	FROM VARCHAR(25) NOT NULL
go

CREATE TYPE [CITY]
	FROM VARCHAR(25) NULL
go

CREATE TYPE [id]
	FROM CHAR(9) NOT NULL
go

CREATE TYPE [Standard_Nbrs]
	FROM INTEGER NULL
go

CREATE TYPE [Phn_Stuff]
	FROM INTEGER NULL
go

CREATE TYPE [AREA_CODE_PHONE]
	FROM INTEGER NULL
go

CREATE TYPE [PHONE_NUMBER]
	FROM INTEGER NULL
go

CREATE TYPE [FAX_AREA_CODE]
	FROM INTEGER NULL
go

CREATE TYPE [FAX_NUMBER]
	FROM INTEGER NULL
go

CREATE TABLE [Auth]
( 
	[Auth_Identification] [id] ,
	[Auth_Lst_Nam]       [LAST_NAME] ,
	[Auth_Frst_Nam]      [FIRST_NAME] ,
	[Auth_Phn_Nbr]       [PHONE_NUMBER] ,
	[Auth_Addr]          [STREET_ADDRESS] ,
	[Auth_Cty]           [CITY] ,
	[Auth_St]            [St] ,
	[Auth_Zip_Cd]        [ZIP_CODE] ,
	[Cntrct]             smallint  NULL 
)
go

CREATE TABLE [Back_Ordr]
( 
	[Reschd_Shipment_Dt] datetime  NULL ,
	[Ordr_Shipment_Identifier] [id] 
	CONSTRAINT [area_codes_94095736]
		 DEFAULT  212
	CONSTRAINT [area_codes_94095736]
		CHECK  ( [Ordr_Shipment_Identifier]=201 OR [Ordr_Shipment_Identifier]=212 OR [Ordr_Shipment_Identifier]=215 OR [Ordr_Shipment_Identifier]=732 OR [Ordr_Shipment_Identifier]=908 ),
	[Ordr_Nbr]           integer  NOT NULL ,
	[itm_Seq_Nbr]        integer  NOT NULL 
)
go

CREATE TABLE [Bk]
( 
	[Bk_Identification]  [id] ,
	[Bk_Nam]             char varying(80)  NULL ,
	[Bk_Typ]             char(12)  NULL 
	CONSTRAINT [DF__titles__type__00551192]
		 DEFAULT  'UNDECIDED',
	[Publshr_Identification] [id]  NULL ,
	[MSRP_Price]         money  NULL ,
	[Advance]            money  NULL ,
	[Rylty_Trms]         integer  NULL ,
	[Bk_Note]            char varying(200)  NULL ,
	[Publication_Dt]     [SystemDate] 
	CONSTRAINT [DF__system__date_163967404]
		 DEFAULT  SYSDATE
)
go

CREATE TABLE [Bk_Retrun]
( 
	[Bk_Return_Identification] [id] ,
	[Ordr_Nbr]           integer  NULL ,
	[itm_Seq_Nbr]        integer  NULL ,
	[Bk_Return_Dt]       datetime  NULL 
)
go

CREATE TABLE [Bk_YTD_Sls]
( 
	[Bk_Identification]  [id] ,
	[Yr_To_Dt_Sls_Amt]   DECIMAL(10,2)  NULL ,
	[Yr_To_Dt_Sls_Dt]    [SystemDate] 
	CONSTRAINT [DF__system__date_522928865]
		 DEFAULT  SYSDATE
)
go

CREATE TABLE [BkAuth]
( 
	[Auth_Identification] [id] ,
	[Bk_Identification]  [id] 
)
go

CREATE TABLE [Crd_Card]
( 
	[Card_Nbr]           integer  NULL ,
	[Card_Expiration_Dt] datetime  NULL ,
	[Crd_Card_Typ]       CHAR(4)  NULL ,
	[Card_Vendor_Nam]    char varying(20)  NULL ,
	[Crd_Card_Amt]       numeric(7,2)  NULL ,
	[Pmt_Nbr]            integer  NOT NULL 
)
go

CREATE TABLE [Crd_Chk]
( 
	[Crd_Chk_Event]      CHAR(12)  NOT NULL ,
	[Crd_Chk_Dt]         [SystemDate] 
	CONSTRAINT [DF__system__date_740086126]
		 DEFAULT  SYSDATE,
	[Crd_Stat]           CHAR(12)  NULL ,
	[Pmt_Nbr]            integer  NOT NULL 
)
go

CREATE TABLE [Cust]
( 
	[Cust_Identification] [id] ,
	[Cust_Frst_Nam]      [FIRST_NAME] ,
	[Cust_Lst_Nam]       [LAST_NAME] ,
	[Cust_Street_Addr]   [STREET_ADDRESS] ,
	[Cust_Cmpy_Nam]      varchar(40)  NULL ,
	[Cust_Cty]           [CITY] ,
	[Cust_St]            [St] 
	CONSTRAINT [state_code_54470175]
		 DEFAULT  'NJ',
	[Cust_Zip_Cd]        [ZIP_CODE] ,
	[Cust_Phn_Area_Cd]   [AREA_CODE_PHONE] 
	CONSTRAINT [area_codes_639185628]
		 DEFAULT  212,
	[Cust_Phn_Nbr]       [PHONE_NUMBER] ,
	[Cust_Fax_Area_Cd]   [FAX_AREA_CODE] 
	CONSTRAINT [area_codes_755970790]
		 DEFAULT  212
	CONSTRAINT [area_codes_755970790]
		CHECK  ( [Cust_Fax_Area_Cd]=201 OR [Cust_Fax_Area_Cd]=212 OR [Cust_Fax_Area_Cd]=215 OR [Cust_Fax_Area_Cd]=732 OR [Cust_Fax_Area_Cd]=908 ),
	[Cust_Fax_Nbr]       [FAX_NUMBER] ,
	[demo_id]            char(18)  NOT NULL 
)
go

CREATE TABLE [demo]
( 
	[demo_id]            char(18)  NOT NULL ,
	[Frst_Nam]           [FIRST_NAME] ,
	[Lst_Nam]            [LAST_NAME] ,
	[street_Addr]        [STREET_ADDRESS] ,
	[zip_Cd]             [ZIP_CODE] ,
	[St]                 [St] 
	CONSTRAINT [state_code_2092804776]
		 DEFAULT  'NJ'
)
go

CREATE TABLE [Disc]
( 
	[Disc_Typ]           varchar(4)  NOT NULL ,
	[Low_Qty]            smallint  NULL ,
	[High_Qty]           smallint  NULL ,
	[Disc_Pct]           decimal(4,2)  NULL 
)
go

CREATE TABLE [Emp]
( 
	[Emp_Identification] [id] ,
	[Emp_Frst_Nam]       char varying(20)  NULL ,
	[Emp_Middle_Initial] char(1)  NULL ,
	[Emp_Lst_Nam]        char varying(30)  NULL ,
	[Job_Identification] [id] 
	CONSTRAINT [DF__employee__job_id__1B0907CE]
		 DEFAULT  1
	CONSTRAINT [area_codes_1340590503]
		CHECK  ( [Job_Identification]=201 OR [Job_Identification]=212 OR [Job_Identification]=215 OR [Job_Identification]=732 OR [Job_Identification]=908 ),
	[Current_Emp_Job_Title] tinyint  NULL 
	CONSTRAINT [DF__employee__job_lv__1CF15040]
		 DEFAULT  10,
	[Emp_Hire_Dt]        [SystemDate] 
	CONSTRAINT [DF__system__date_1233385636]
		 DEFAULT  SYSDATE
)
go

CREATE TABLE [Job]
( 
	[Job_Identification] [id] ,
	[Job_Desc]           char varying(50)  NULL 
	CONSTRAINT [DF__jobs__job_desc__1273C1CD]
		 DEFAULT  'New Position - title not formalized yet',
	[Minimum_Level]      tinyint  NULL 
	CONSTRAINT [CK__jobs__min_lvl__1367E606]
		CHECK  ( Minimum_Level >= 10 ),
	[Maximum_Level]      tinyint  NULL 
	CONSTRAINT [CK__jobs__max_lvl__145C0A3F]
		CHECK  ( Maximum_Level <= 250 )
)
go

CREATE TABLE [Money_Ordr]
( 
	[Money_Ordr_Nbr]     integer  NULL ,
	[Money_Ordr_Amt]     numeric(7,2)  NULL ,
	[Pmt_Nbr]            integer  NOT NULL 
)
go

CREATE TABLE [Ordr_itm]
( 
	[Ordr_Qty]           smallint  NULL ,
	[Ordr_Nbr]           integer  NOT NULL ,
	[Bk_Identification]  [id] ,
	[itm_Seq_Nbr]        integer  NOT NULL ,
	[Disc_Typ]           char varying(4)  NULL ,
	[Ordr_Disc_Amt]      DECIMAL(7,2)  NULL ,
	[Ordr_Price]         DECIMAL(7,2)  NULL 
)
go

CREATE TABLE [Ordr_Shipment]
( 
	[Ordr_Shipment_Identifier] [id] ,
	[Blng_Addr]          [STREET_ADDRESS] ,
	[Shipping_Addr]      [STREET_ADDRESS] ,
	[Shipment_Stat]      CHAR(7)  NULL ,
	[Shed_Shipment_Dt]   [SystemDate] 
	CONSTRAINT [DF__system__date_1279879388]
		 DEFAULT  SYSDATE,
	[Ordr_Nbr]           integer  NOT NULL ,
	[itm_Seq_Nbr]        integer  NOT NULL 
)
go

CREATE TABLE [Personal_Chk]
( 
	[Chk_Nbr]            integer  NULL ,
	[Chk_Account_Nbr]    integer  NULL ,
	[Chk_Bank_Nbr]       integer  NULL ,
	[Chk_Driver_License_Nbr] CHAR(15)  NULL ,
	[Chk_Amt]            numeric(7,2)  NULL ,
	[Pmt_Nbr]            integer  NOT NULL 
)
go

CREATE TABLE [Pmt]
( 
	[Pmt_Nbr]            integer  NOT NULL ,
	[Pmt_Dt]             [SystemDate] 
	CONSTRAINT [DF__system__date_1667382218]
		 DEFAULT  SYSDATE,
	[Pmt_Amt]            DECIMAL(7,2)  NULL ,
	[Pmt_Typ]            CHAR(9)  NULL 
)
go

CREATE TABLE [Publshr]
( 
	[Publshr_Identification] [id] ,
	[Publshr_Nam]        char varying(40)  NULL ,
	[Publshr_Addr]       [STREET_ADDRESS] ,
	[Publshr_Cty]        [CITY] ,
	[Publshr_St]         [St] 
	CONSTRAINT [DF__publisher__count__7D78A4E7]
		 DEFAULT  'USA',
	[Publshr_Zip_Cd]     [ZIP_CODE] 
)
go

CREATE TABLE [Publshr_Logo]
( 
	[Publshr_Identification] [id] ,
	[Publshr_Logo]       character(500)  NULL ,
	[Publshr_Public_Rel_Inf] varchar(200)  NULL 
)
go

CREATE TABLE [Purchase_Ordr]
( 
	[Stor_Identification] [id] ,
	[Ordr_Nbr]           integer  NOT NULL ,
	[Ordr_Dt]            [SystemDate] 
	CONSTRAINT [DF__system__date_2120463774]
		 DEFAULT  SYSDATE,
	[Pmt_Trms]           char varying(12)  NULL ,
	[Cust_Identification] [id]  NULL ,
	[demo_id]            char(18)  NULL 
)
go

CREATE TABLE [Reporting_Structure]
( 
	[Manager]            [id] ,
	[Reports_To]         [id] ,
	[Start_Dt]           datetime  NULL ,
	[End_Dt]             datetime  NULL 
)
go

CREATE TABLE [Rgn]
( 
	[Rgn_Identification] [id] ,
	[Rgn_Area]           CHAR(7)  NULL ,
	[Rgn_Desc]           varchar(75)  NULL 
)
go

CREATE TABLE [Rylty]
( 
	[Low_Rnge]           integer  NULL ,
	[High_Rnge]          integer  NULL ,
	[Rylty_Amt]          numeric(5,2)  NULL ,
	[Rylty_Identification] [id] 
)
go

CREATE TABLE [Rylty_Hist]
( 
	[Ordr_Nbr]           integer  NULL ,
	[itm_Seq_Nbr]        integer  NULL ,
	[Rylty_Hist_Identification] [id] ,
	[Rylty_Pmt_Dt]       [SystemDate] 
	CONSTRAINT [DF__system__date_1990518587]
		 DEFAULT  SYSDATE,
	[Rylty_Pmt_Amt]      decimal(6,2)  NULL ,
	[Rylty_Payee]        char(30)  NULL 
)
go

CREATE TABLE [Rylty_Pmt]
( 
	[Auth_Identification] [id] ,
	[Bk_Identification]  [id] ,
	[Rylty_Identification] [id] 
	CONSTRAINT [area_codes_1273492705]
		 DEFAULT  212
	CONSTRAINT [area_codes_1273492705]
		CHECK  ( [Rylty_Identification]=201 OR [Rylty_Identification]=212 OR [Rylty_Identification]=215 OR [Rylty_Identification]=732 OR [Rylty_Identification]=908 ),
	[Pmt_Dt]             [SystemDate] 
	CONSTRAINT [DF__system__date_668068810]
		 DEFAULT  SYSDATE,
	[Pmt_Amt]            DECIMAL(7,2)  NULL 
)
go

CREATE TABLE [Stor_Nam]
( 
	[Stor_Identification] [id] ,
	[Stor_Nam]           char varying(40)  NULL ,
	[Stor_Addr]          [STREET_ADDRESS] ,
	[Stor_Cty]           [CITY] ,
	[Stor_St]            [St] ,
	[Stor_Zip_Cd]        [ZIP_CODE] ,
	[Rgn_Identification] [id]  NULL 
)
go

ALTER TABLE [Auth]
	ADD CONSTRAINT [UPKCL_auidind] PRIMARY KEY  NONCLUSTERED ([Auth_Identification] ASC)
go

CREATE INDEX [aunmind] ON [Auth]
( 
	[Auth_Lst_Nam]        ASC,
	[Auth_Frst_Nam]       ASC
)
go

ALTER TABLE [Back_Ordr]
	ADD CONSTRAINT [XPKBack_Order] PRIMARY KEY  NONCLUSTERED ([Ordr_Shipment_Identifier] ASC,[Ordr_Nbr] ASC,[itm_Seq_Nbr] ASC)
go

ALTER TABLE [Bk]
	ADD CONSTRAINT [UPKCL_titleidind] PRIMARY KEY  NONCLUSTERED ([Bk_Identification] ASC)
go

CREATE INDEX [titleind] ON [Bk]
( 
	[Bk_Nam]              ASC
)
go

ALTER TABLE [Bk_Retrun]
	ADD CONSTRAINT [XPKBook_Retrun] PRIMARY KEY  NONCLUSTERED ([Bk_Return_Identification] ASC)
go

ALTER TABLE [Bk_YTD_Sls]
	ADD CONSTRAINT [XPKBook_YTD_Sales] PRIMARY KEY  NONCLUSTERED ([Bk_Identification] ASC)
go

ALTER TABLE [BkAuth]
	ADD CONSTRAINT [UPKCL_taind] PRIMARY KEY  NONCLUSTERED ([Auth_Identification] ASC,[Bk_Identification] ASC)
go

ALTER TABLE [Crd_Card]
	ADD CONSTRAINT [XPKCredit_Card] PRIMARY KEY  NONCLUSTERED ([Pmt_Nbr] ASC)
go

ALTER TABLE [Crd_Chk]
	ADD CONSTRAINT [XPKCredit_Check] PRIMARY KEY  NONCLUSTERED ([Crd_Chk_Event] ASC)
go

ALTER TABLE [Cust]
	ADD CONSTRAINT [XPKCustomer] PRIMARY KEY  NONCLUSTERED ([Cust_Identification] ASC,[demo_id] ASC)
go

CREATE INDEX [XIE1Customer] ON [Cust]
( 
	[Cust_Lst_Nam]        ASC,
	[Cust_Frst_Nam]       ASC
)
go

ALTER TABLE [demo]
	ADD CONSTRAINT [XPKdemo] PRIMARY KEY  CLUSTERED ([demo_id] ASC)
go

ALTER TABLE [Disc]
	ADD CONSTRAINT [XPKDiscount] PRIMARY KEY  NONCLUSTERED ([Disc_Typ] ASC)
go

ALTER TABLE [Emp]
	ADD CONSTRAINT [PK_emp_id] PRIMARY KEY  NONCLUSTERED ([Emp_Identification] ASC)
go

CREATE INDEX [employee_ind] ON [Emp]
( 
	[Emp_Lst_Nam]         ASC,
	[Emp_Frst_Nam]        ASC,
	[Emp_Middle_Initial]  ASC
)
go

ALTER TABLE [Job]
	ADD CONSTRAINT [PK__jobs__117F9D94] PRIMARY KEY  NONCLUSTERED ([Job_Identification] ASC)
go

ALTER TABLE [Ordr_itm]
	ADD CONSTRAINT [XPKOrder_Item] PRIMARY KEY  NONCLUSTERED ([Ordr_Nbr] ASC,[itm_Seq_Nbr] ASC)
go

ALTER TABLE [Ordr_Shipment]
	ADD CONSTRAINT [XPKOrder_Shipment] PRIMARY KEY  NONCLUSTERED ([Ordr_Shipment_Identifier] ASC,[Ordr_Nbr] ASC,[itm_Seq_Nbr] ASC)
go

ALTER TABLE [Pmt]
	ADD CONSTRAINT [XPKPayment] PRIMARY KEY  NONCLUSTERED ([Pmt_Nbr] ASC)
go

ALTER TABLE [Publshr]
	ADD CONSTRAINT [UPKCL_pubind] PRIMARY KEY  NONCLUSTERED ([Publshr_Identification] ASC)
go

ALTER TABLE [Publshr_Logo]
	ADD CONSTRAINT [UPKCL_pubinfo] PRIMARY KEY  NONCLUSTERED ([Publshr_Identification] ASC)
go

ALTER TABLE [Purchase_Ordr]
	ADD CONSTRAINT [UPKCL_sales] PRIMARY KEY  NONCLUSTERED ([Ordr_Nbr] ASC)
go

ALTER TABLE [Reporting_Structure]
	ADD CONSTRAINT [XPKReporting_Structure] PRIMARY KEY  NONCLUSTERED ([Manager] ASC,[Reports_To] ASC)
go

ALTER TABLE [Rgn]
	ADD CONSTRAINT [XPKRegion] PRIMARY KEY  NONCLUSTERED ([Rgn_Identification] ASC)
go

ALTER TABLE [Rylty]
	ADD CONSTRAINT [XPKRoyalty] PRIMARY KEY  NONCLUSTERED ([Rylty_Identification] ASC)
go

ALTER TABLE [Rylty_Hist]
	ADD CONSTRAINT [XPKRoyalty_History] PRIMARY KEY  NONCLUSTERED ([Rylty_Hist_Identification] ASC)
go

ALTER TABLE [Rylty_Pmt]
	ADD CONSTRAINT [XPKRoyalty_Payment] PRIMARY KEY  NONCLUSTERED ([Auth_Identification] ASC,[Bk_Identification] ASC,[Rylty_Identification] ASC)
go

ALTER TABLE [Stor_Nam]
	ADD CONSTRAINT [UPK_storeid] PRIMARY KEY  NONCLUSTERED ([Stor_Identification] ASC)
go

CREATE VIEW titleview
   (Book_Nam, Auth_Id, Auth_Lst_Nam, MRSP_Prc, Publshr_Id)
AS SELECT
   Book.Book_Nam, Auth.Auth_Id, Auth.Auth_Lst_Nam,
   Book.MRSP_Prc, Book.Publshr_Id
FROM Book, Auth, BookAuth

go

CREATE VIEW [Order_View]([Stor_Nam],[Ordr_Nbr],[Ordr_Dt],[Bk_Nam],[Ordr_Qty],[Ordr_Disc_Amt],[Ordr_Price])
AS
SELECT [Stor_Nam].[Stor_Nam],[Purchase_Ordr].[Ordr_Nbr],[Purchase_Ordr].[Ordr_Dt],[Bk].[Bk_Nam],[Ordr_itm].[Ordr_Qty],[Ordr_itm].[Ordr_Disc_Amt],[Ordr_itm].[Ordr_Price]
	FROM [Ordr_itm],[Bk],[Purchase_Ordr],[Stor_Nam]
go

CREATE VIEW [Publisher_View]([Emp_Frst_Nam],[Emp_Lst_Nam],[Publshr_Nam],[Bk_Nam],[Yr_To_Dt_Sls_Amt])
AS
SELECT [Emp].[Emp_Frst_Nam],[Emp].[Emp_Lst_Nam],[Publshr].[Publshr_Nam],[Bk].[Bk_Nam],[Bk_YTD_Sls].[Yr_To_Dt_Sls_Amt]
	FROM [Publshr],[Bk],[Bk_YTD_Sls],[Emp]
go

CREATE VIEW [Payment_View]([Card_Nbr],[Crd_Card_Amt],[Money_Ordr_Nbr],[Money_Ordr_Amt],[Chk_Nbr],[Chk_Amt],[Cust_Frst_Nam],[Cust_Lst_Nam],[Ordr_Nbr],[Ordr_Dt])
AS
SELECT [Crd_Card].[Card_Nbr],[Crd_Card].[Crd_Card_Amt],[Money_Ordr].[Money_Ordr_Nbr],[Money_Ordr].[Money_Ordr_Amt],[Personal_Chk].[Chk_Nbr],[Personal_Chk].[Chk_Amt],[Cust].[Cust_Frst_Nam],[Cust].[Cust_Lst_Nam],[Purchase_Ordr].[Ordr_Nbr],[Purchase_Ordr].[Ordr_Dt]
	FROM [Money_Ordr],[Pmt],[Crd_Card],[Personal_Chk],[Cust],[Purchase_Ordr]
go


ALTER TABLE [Back_Ordr]
	ADD CONSTRAINT [FK_Ordr_Shipment_Back_Ordr] FOREIGN KEY ([Ordr_Shipment_Identifier],[Ordr_Nbr],[itm_Seq_Nbr]) REFERENCES [Ordr_Shipment]([Ordr_Shipment_Identifier],[Ordr_Nbr],[itm_Seq_Nbr])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Bk]
	ADD CONSTRAINT [FK_Publshr_Bk] FOREIGN KEY ([Publshr_Identification]) REFERENCES [Publshr]([Publshr_Identification])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Bk_Retrun]
	ADD CONSTRAINT [FK_Ordr_itm_Bk_Retrun] FOREIGN KEY ([Ordr_Nbr],[itm_Seq_Nbr]) REFERENCES [Ordr_itm]([Ordr_Nbr],[itm_Seq_Nbr])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Bk_YTD_Sls]
	ADD CONSTRAINT [FK_Bk_Bk_YTD_Sls] FOREIGN KEY ([Bk_Identification]) REFERENCES [Bk]([Bk_Identification])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [BkAuth]
	ADD CONSTRAINT [FK_Auth_BkAuth] FOREIGN KEY ([Auth_Identification]) REFERENCES [Auth]([Auth_Identification])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BkAuth]
	ADD CONSTRAINT [FK_Bk_BkAuth] FOREIGN KEY ([Bk_Identification]) REFERENCES [Bk]([Bk_Identification])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Crd_Chk]
	ADD CONSTRAINT [FK_Crd_Card_Crd_Chk] FOREIGN KEY ([Pmt_Nbr]) REFERENCES [Crd_Card]([Pmt_Nbr])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Cust]
	ADD CONSTRAINT [FK_demo_Cust] FOREIGN KEY ([demo_id]) REFERENCES [demo]([demo_id])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Emp]
	ADD CONSTRAINT [FK_Job_Emp] FOREIGN KEY ([Job_Identification]) REFERENCES [Job]([Job_Identification])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Money_Ordr]
	ADD CONSTRAINT [FK_Pmt_Money_Ordr] FOREIGN KEY ([Pmt_Nbr]) REFERENCES [Pmt]([Pmt_Nbr])
		ON DELETE CASCADE
		ON UPDATE CASCADE
go


ALTER TABLE [Ordr_itm]
	ADD CONSTRAINT [FK_Disc_Ordr_itm] FOREIGN KEY ([Disc_Typ]) REFERENCES [Disc]([Disc_Typ])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Ordr_itm]
	ADD CONSTRAINT [FK_Purchase_Ordr_Ordr_itm] FOREIGN KEY ([Ordr_Nbr]) REFERENCES [Purchase_Ordr]([Ordr_Nbr])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Ordr_itm]
	ADD CONSTRAINT [FK_Bk_Ordr_itm] FOREIGN KEY ([Bk_Identification]) REFERENCES [Bk]([Bk_Identification])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Ordr_Shipment]
	ADD CONSTRAINT [FK_Ordr_itm_Ordr_Shipment] FOREIGN KEY ([Ordr_Nbr],[itm_Seq_Nbr]) REFERENCES [Ordr_itm]([Ordr_Nbr],[itm_Seq_Nbr])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Personal_Chk]
	ADD CONSTRAINT [FK_Pmt_Personal_Chk] FOREIGN KEY ([Pmt_Nbr]) REFERENCES [Pmt]([Pmt_Nbr])
		ON DELETE CASCADE
		ON UPDATE CASCADE
go


ALTER TABLE [Publshr_Logo]
	ADD CONSTRAINT [FK_Publshr_Publshr_Logo] FOREIGN KEY ([Publshr_Identification]) REFERENCES [Publshr]([Publshr_Identification])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Purchase_Ordr]
	ADD CONSTRAINT [FK_Cust_Purchase_Ordr] FOREIGN KEY ([Cust_Identification],[demo_id]) REFERENCES [Cust]([Cust_Identification],[demo_id])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Purchase_Ordr]
	ADD CONSTRAINT [FK_Stor_Nam_Purchase_Ordr] FOREIGN KEY ([Stor_Identification]) REFERENCES [Stor_Nam]([Stor_Identification])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Reporting_Structure]
	ADD CONSTRAINT [FK_Emp_Reporting_Structure] FOREIGN KEY ([Manager]) REFERENCES [Emp]([Emp_Identification])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Reporting_Structure]
	ADD CONSTRAINT [FK_Emp_Reporting_Structure] FOREIGN KEY ([Reports_To]) REFERENCES [Emp]([Emp_Identification])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Rylty_Hist]
	ADD CONSTRAINT [FK_Ordr_itm_Rylty_Hist] FOREIGN KEY ([Ordr_Nbr],[itm_Seq_Nbr]) REFERENCES [Ordr_itm]([Ordr_Nbr],[itm_Seq_Nbr])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Rylty_Pmt]
	ADD CONSTRAINT [FK_Rylty_Rylty_Pmt] FOREIGN KEY ([Rylty_Identification]) REFERENCES [Rylty]([Rylty_Identification])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Rylty_Pmt]
	ADD CONSTRAINT [FK_BkAuth_Rylty_Pmt] FOREIGN KEY ([Auth_Identification],[Bk_Identification]) REFERENCES [BkAuth]([Auth_Identification],[Bk_Identification])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [Stor_Nam]
	ADD CONSTRAINT [FK_Rgn_Stor_Nam] FOREIGN KEY ([Rgn_Identification]) REFERENCES [Rgn]([Rgn_Identification])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

CREATE  PROCEDURE [byroyalty] 
--   (<argument name> <in out nocopy> <argument datatype> <default value>)
AS
BEGIN
   select au_id 
   from titleauthor
   where titleauthor.royaltyper = @percentage;
END;
go

CREATE  PROCEDURE [reptq1] 
--   (<argument name> <in out nocopy> <argument datatype> <default value>)
AS
BEGIN
   select 
	case when grouping(pub_id) = 1 then 'ALL' 
             else pub_id end as pub_id, avg(price) as avg_price
   from titles
   where price is NOT NULL
   group by pub_id with rollup
   order by pub_id;
END;
go

CREATE  PROCEDURE [reptq2] 
--   (<argument name> <in out nocopy> <argument datatype> <default value>)
AS
BEGIN
   select 
      case when grouping(type) = 1 then 'ALL' 
      else type end as type, 
      case when grouping(pub_id) = 1 then 'ALL' 
      else pub_id end as pub_id, avg(ytd_sales) as avg_ytd_sales
   from titles
   where pub_id is NOT NULL
   group by pub_id, type with rollup;
END;
go

CREATE  PROCEDURE [reptq3x] 
--   (<argument name> <in out nocopy> <argument datatype> <default value>)
AS
BEGIN
   select 
      case when grouping(pub_id) = 1 then 'ALL' 
      else pub_id end as pub_id, 
      case when grouping(type) = 1 then 'ALL' 
      else type end as type, count(title_id) as cnt
   from titles
   where price >@lolimit AND price <@hilimit AND 
         type = @type OR type LIKE '%cook%'
   group by pub_id, type with rollup;
END;
go

CREATE TRIGGER tD_BookAuthor ON BkAuth FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BkAuth */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BkAuth  Rylty_Pmt on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003863b", PARENT_OWNER="", PARENT_TABLE="BkAuth"
    CHILD_OWNER="", CHILD_TABLE="Rylty_Pmt"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BkAuth_Rylty_Pmt", FK_COLUMNS="Auth_Identification""Bk_Identification" */
    IF EXISTS (
      SELECT * FROM deleted,Rylty_Pmt
      WHERE
        /*  %JoinFKPK(Rylty_Pmt,deleted," = "," AND") */
        Rylty_Pmt.Auth_Identification = deleted.Auth_Identification AND
        Rylty_Pmt.Bk_Identification = deleted.Bk_Identification
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BkAuth because Rylty_Pmt exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Bk  BkAuth on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Bk"
    CHILD_OWNER="", CHILD_TABLE="BkAuth"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Bk_BkAuth", FK_COLUMNS="Bk_Identification" */
    IF EXISTS (SELECT * FROM deleted,Bk
      WHERE
        /* %JoinFKPK(deleted,Bk," = "," AND") */
        deleted.Bk_Identification = Bk.Bk_Identification AND
        NOT EXISTS (
          SELECT * FROM BkAuth
          WHERE
            /* %JoinFKPK(BkAuth,Bk," = "," AND") */
            BkAuth.Bk_Identification = Bk.Bk_Identification
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BkAuth because Bk exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Auth  BkAuth on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Auth"
    CHILD_OWNER="", CHILD_TABLE="BkAuth"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Auth_BkAuth", FK_COLUMNS="Auth_Identification" */
    IF EXISTS (SELECT * FROM deleted,Auth
      WHERE
        /* %JoinFKPK(deleted,Auth," = "," AND") */
        deleted.Auth_Identification = Auth.Auth_Identification AND
        NOT EXISTS (
          SELECT * FROM BkAuth
          WHERE
            /* %JoinFKPK(BkAuth,Auth," = "," AND") */
            BkAuth.Auth_Identification = Auth.Auth_Identification
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BkAuth because Auth exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_BookAuthor ON BkAuth FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BkAuth */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAuth_Identification id, 
           @insBk_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BkAuth  Rylty_Pmt on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000409c9", PARENT_OWNER="", PARENT_TABLE="BkAuth"
    CHILD_OWNER="", CHILD_TABLE="Rylty_Pmt"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BkAuth_Rylty_Pmt", FK_COLUMNS="Auth_Identification""Bk_Identification" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Auth_Identification) OR
    UPDATE(Bk_Identification)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Rylty_Pmt
      WHERE
        /*  %JoinFKPK(Rylty_Pmt,deleted," = "," AND") */
        Rylty_Pmt.Auth_Identification = deleted.Auth_Identification AND
        Rylty_Pmt.Bk_Identification = deleted.Bk_Identification
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BkAuth because Rylty_Pmt exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Bk  BkAuth on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Bk"
    CHILD_OWNER="", CHILD_TABLE="BkAuth"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Bk_BkAuth", FK_COLUMNS="Bk_Identification" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Bk_Identification)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Bk
        WHERE
          /* %JoinFKPK(inserted,Bk) */
          inserted.Bk_Identification = Bk.Bk_Identification
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BkAuth because Bk does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Auth  BkAuth on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Auth"
    CHILD_OWNER="", CHILD_TABLE="BkAuth"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Auth_BkAuth", FK_COLUMNS="Auth_Identification" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Auth_Identification)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Auth
        WHERE
          /* %JoinFKPK(inserted,Auth) */
          inserted.Auth_Identification = Auth.Auth_Identification
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BkAuth because Auth does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Store_Name ON Stor_Nam FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Stor_Nam */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Stor_Nam  Purchase_Ordr on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00026c9a", PARENT_OWNER="", PARENT_TABLE="Stor_Nam"
    CHILD_OWNER="", CHILD_TABLE="Purchase_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Stor_Nam_Purchase_Ordr", FK_COLUMNS="Stor_Identification" */
    IF EXISTS (
      SELECT * FROM deleted,Purchase_Ordr
      WHERE
        /*  %JoinFKPK(Purchase_Ordr,deleted," = "," AND") */
        Purchase_Ordr.Stor_Identification = deleted.Stor_Identification
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Stor_Nam because Purchase_Ordr exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Rgn  Stor_Nam on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Rgn"
    CHILD_OWNER="", CHILD_TABLE="Stor_Nam"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Rgn_Stor_Nam", FK_COLUMNS="Rgn_Identification" */
    IF EXISTS (SELECT * FROM deleted,Rgn
      WHERE
        /* %JoinFKPK(deleted,Rgn," = "," AND") */
        deleted.Rgn_Identification = Rgn.Rgn_Identification AND
        NOT EXISTS (
          SELECT * FROM Stor_Nam
          WHERE
            /* %JoinFKPK(Stor_Nam,Rgn," = "," AND") */
            Stor_Nam.Rgn_Identification = Rgn.Rgn_Identification
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Stor_Nam because Rgn exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Store_Name ON Stor_Nam FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Stor_Nam */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insStor_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Stor_Nam  Purchase_Ordr on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002bf98", PARENT_OWNER="", PARENT_TABLE="Stor_Nam"
    CHILD_OWNER="", CHILD_TABLE="Purchase_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Stor_Nam_Purchase_Ordr", FK_COLUMNS="Stor_Identification" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Stor_Identification)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchase_Ordr
      WHERE
        /*  %JoinFKPK(Purchase_Ordr,deleted," = "," AND") */
        Purchase_Ordr.Stor_Identification = deleted.Stor_Identification
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Stor_Nam because Purchase_Ordr exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Rgn  Stor_Nam on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Rgn"
    CHILD_OWNER="", CHILD_TABLE="Stor_Nam"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Rgn_Stor_Nam", FK_COLUMNS="Rgn_Identification" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Rgn_Identification)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Rgn
        WHERE
          /* %JoinFKPK(inserted,Rgn) */
          inserted.Rgn_Identification = Rgn.Rgn_Identification
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.Rgn_Identification IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Stor_Nam because Rgn does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Purchase_Order ON Purchase_Ordr FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Purchase_Ordr */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Purchase_Ordr  Ordr_itm on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003e862", PARENT_OWNER="", PARENT_TABLE="Purchase_Ordr"
    CHILD_OWNER="", CHILD_TABLE="Ordr_itm"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchase_Ordr_Ordr_itm", FK_COLUMNS="Ordr_Nbr" */
    IF EXISTS (
      SELECT * FROM deleted,Ordr_itm
      WHERE
        /*  %JoinFKPK(Ordr_itm,deleted," = "," AND") */
        Ordr_itm.Ordr_Nbr = deleted.Ordr_Nbr
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Purchase_Ordr because Ordr_itm exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Cust  Purchase_Ordr on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Cust"
    CHILD_OWNER="", CHILD_TABLE="Purchase_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Cust_Purchase_Ordr", FK_COLUMNS="Cust_Identification""demo_id" */
    IF EXISTS (SELECT * FROM deleted,Cust
      WHERE
        /* %JoinFKPK(deleted,Cust," = "," AND") */
        deleted.Cust_Identification = Cust.Cust_Identification AND
        deleted.demo_id = Cust.demo_id AND
        NOT EXISTS (
          SELECT * FROM Purchase_Ordr
          WHERE
            /* %JoinFKPK(Purchase_Ordr,Cust," = "," AND") */
            Purchase_Ordr.Cust_Identification = Cust.Cust_Identification AND
            Purchase_Ordr.demo_id = Cust.demo_id
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchase_Ordr because Cust exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Stor_Nam  Purchase_Ordr on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Stor_Nam"
    CHILD_OWNER="", CHILD_TABLE="Purchase_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Stor_Nam_Purchase_Ordr", FK_COLUMNS="Stor_Identification" */
    IF EXISTS (SELECT * FROM deleted,Stor_Nam
      WHERE
        /* %JoinFKPK(deleted,Stor_Nam," = "," AND") */
        deleted.Stor_Identification = Stor_Nam.Stor_Identification AND
        NOT EXISTS (
          SELECT * FROM Purchase_Ordr
          WHERE
            /* %JoinFKPK(Purchase_Ordr,Stor_Nam," = "," AND") */
            Purchase_Ordr.Stor_Identification = Stor_Nam.Stor_Identification
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchase_Ordr because Stor_Nam exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Purchase_Order ON Purchase_Ordr FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Purchase_Ordr */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insOrdr_Nbr integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchase_Ordr  Ordr_itm on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00043e28", PARENT_OWNER="", PARENT_TABLE="Purchase_Ordr"
    CHILD_OWNER="", CHILD_TABLE="Ordr_itm"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchase_Ordr_Ordr_itm", FK_COLUMNS="Ordr_Nbr" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Ordr_Nbr)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Ordr_itm
      WHERE
        /*  %JoinFKPK(Ordr_itm,deleted," = "," AND") */
        Ordr_itm.Ordr_Nbr = deleted.Ordr_Nbr
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Purchase_Ordr because Ordr_itm exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Cust  Purchase_Ordr on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Cust"
    CHILD_OWNER="", CHILD_TABLE="Purchase_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Cust_Purchase_Ordr", FK_COLUMNS="Cust_Identification""demo_id" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Cust_Identification) OR
    UPDATE(demo_id)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Cust
        WHERE
          /* %JoinFKPK(inserted,Cust) */
          inserted.Cust_Identification = Cust.Cust_Identification and
          inserted.demo_id = Cust.demo_id
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.Cust_Identification IS NULL AND
      inserted.demo_id IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchase_Ordr because Cust does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Stor_Nam  Purchase_Ordr on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Stor_Nam"
    CHILD_OWNER="", CHILD_TABLE="Purchase_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Stor_Nam_Purchase_Ordr", FK_COLUMNS="Stor_Identification" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Stor_Identification)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Stor_Nam
        WHERE
          /* %JoinFKPK(inserted,Stor_Nam) */
          inserted.Stor_Identification = Stor_Nam.Stor_Identification
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchase_Ordr because Stor_Nam does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Royalty ON Rylty FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Rylty */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Rylty  Rylty_Pmt on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00012491", PARENT_OWNER="", PARENT_TABLE="Rylty"
    CHILD_OWNER="", CHILD_TABLE="Rylty_Pmt"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Rylty_Rylty_Pmt", FK_COLUMNS="Rylty_Identification" */
    IF EXISTS (
      SELECT * FROM deleted,Rylty_Pmt
      WHERE
        /*  %JoinFKPK(Rylty_Pmt,deleted," = "," AND") */
        Rylty_Pmt.Rylty_Identification = deleted.Rylty_Identification
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Rylty because Rylty_Pmt exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Royalty ON Rylty FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Rylty */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insRylty_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Rylty  Rylty_Pmt on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000146d5", PARENT_OWNER="", PARENT_TABLE="Rylty"
    CHILD_OWNER="", CHILD_TABLE="Rylty_Pmt"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Rylty_Rylty_Pmt", FK_COLUMNS="Rylty_Identification" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Rylty_Identification)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Rylty_Pmt
      WHERE
        /*  %JoinFKPK(Rylty_Pmt,deleted," = "," AND") */
        Rylty_Pmt.Rylty_Identification = deleted.Rylty_Identification
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Rylty because Rylty_Pmt exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Discount ON Disc FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Disc */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Disc  Ordr_itm on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000116e9", PARENT_OWNER="", PARENT_TABLE="Disc"
    CHILD_OWNER="", CHILD_TABLE="Ordr_itm"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Disc_Ordr_itm", FK_COLUMNS="Disc_Typ" */
    IF EXISTS (
      SELECT * FROM deleted,Ordr_itm
      WHERE
        /*  %JoinFKPK(Ordr_itm,deleted," = "," AND") */
        Ordr_itm.Disc_Typ = deleted.Disc_Typ
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Disc because Ordr_itm exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Discount ON Disc FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Disc */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insDisc_Typ varchar(4),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Disc  Ordr_itm on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000126ee", PARENT_OWNER="", PARENT_TABLE="Disc"
    CHILD_OWNER="", CHILD_TABLE="Ordr_itm"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Disc_Ordr_itm", FK_COLUMNS="Disc_Typ" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Disc_Typ)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Ordr_itm
      WHERE
        /*  %JoinFKPK(Ordr_itm,deleted," = "," AND") */
        Ordr_itm.Disc_Typ = deleted.Disc_Typ
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Disc because Ordr_itm exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Job ON Job FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Job */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Job  Emp on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001056e", PARENT_OWNER="", PARENT_TABLE="Job"
    CHILD_OWNER="", CHILD_TABLE="Emp"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Job_Emp", FK_COLUMNS="Job_Identification" */
    IF EXISTS (
      SELECT * FROM deleted,Emp
      WHERE
        /*  %JoinFKPK(Emp,deleted," = "," AND") */
        Emp.Job_Identification = deleted.Job_Identification
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Job because Emp exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Job ON Job FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Job */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insJob_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Job  Emp on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001260e", PARENT_OWNER="", PARENT_TABLE="Job"
    CHILD_OWNER="", CHILD_TABLE="Emp"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Job_Emp", FK_COLUMNS="Job_Identification" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Job_Identification)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Emp
      WHERE
        /*  %JoinFKPK(Emp,deleted," = "," AND") */
        Emp.Job_Identification = deleted.Job_Identification
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Job because Emp exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Publisher_Logo ON Publshr_Logo FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Publshr_Logo */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Publshr  Publshr_Logo on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00017767", PARENT_OWNER="", PARENT_TABLE="Publshr"
    CHILD_OWNER="", CHILD_TABLE="Publshr_Logo"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Publshr_Publshr_Logo", FK_COLUMNS="Publshr_Identification" */
    IF EXISTS (SELECT * FROM deleted,Publshr
      WHERE
        /* %JoinFKPK(deleted,Publshr," = "," AND") */
        deleted.Publshr_Identification = Publshr.Publshr_Identification AND
        NOT EXISTS (
          SELECT * FROM Publshr_Logo
          WHERE
            /* %JoinFKPK(Publshr_Logo,Publshr," = "," AND") */
            Publshr_Logo.Publshr_Identification = Publshr.Publshr_Identification
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Publshr_Logo because Publshr exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Publisher_Logo ON Publshr_Logo FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Publshr_Logo */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPublshr_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Publshr  Publshr_Logo on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00018ffd", PARENT_OWNER="", PARENT_TABLE="Publshr"
    CHILD_OWNER="", CHILD_TABLE="Publshr_Logo"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Publshr_Publshr_Logo", FK_COLUMNS="Publshr_Identification" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Publshr_Identification)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Publshr
        WHERE
          /* %JoinFKPK(inserted,Publshr) */
          inserted.Publshr_Identification = Publshr.Publshr_Identification
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Publshr_Logo because Publshr does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE  TRIGGER [employee_insupd]
  AFTER INSERT OR UPDATE
  ON Emp
  
  
  

--Get the range of level for this job type from the jobs table.
declare Xmin_lvl smallint;
        Xmax_lvl smallint;
        Xemp_lvl smallint;
        Xjob_id  smallint;

Begin
   select Xmin_lvl = min_lvl,
      Xmax_lvl = max_lvl,
      Xemp_lvl = i.job_lvl,
      Xjob_id = i.job_id
   from employee e, jobs j, inserted i
   where e.emp_id = i.emp_id AND i.job_id = j.job_id;

   IF (Xjob_id = 1) and (Xemp_lvl <> 10) then
      raise_application_error (-20001, 
      'Job id 1 expects the default level of 10.');
   ELSE
      IF NOT (Xemp_lvl BETWEEN Xmin_lvl AND Xmax_lvl) then
         raise_application_error (-20002, 
         'The level for job_id:%d should be between %d and %d.', 
         Xjob_id, Xmin_lvl, Xmax_lvl);
      end if;
   end if;
END;

ENABLE TRIGGER [employee_insupd] ON Emp
go

CREATE TRIGGER tD_Employee ON Emp FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Emp */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Emp  Reporting_Structure on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00036c77", PARENT_OWNER="", PARENT_TABLE="Emp"
    CHILD_OWNER="", CHILD_TABLE="Reporting_Structure"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Emp_Reporting_Structure", FK_COLUMNS="Reports_To" */
    IF EXISTS (
      SELECT * FROM deleted,Reporting_Structure
      WHERE
        /*  %JoinFKPK(Reporting_Structure,deleted," = "," AND") */
        Reporting_Structure.Reports_To = deleted.Emp_Identification
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Emp because Reporting_Structure exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Emp  Reporting_Structure on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Emp"
    CHILD_OWNER="", CHILD_TABLE="Reporting_Structure"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Emp_Reporting_Structure", FK_COLUMNS="Manager" */
    IF EXISTS (
      SELECT * FROM deleted,Reporting_Structure
      WHERE
        /*  %JoinFKPK(Reporting_Structure,deleted," = "," AND") */
        Reporting_Structure.Manager = deleted.Emp_Identification
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Emp because Reporting_Structure exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Job  Emp on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Job"
    CHILD_OWNER="", CHILD_TABLE="Emp"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Job_Emp", FK_COLUMNS="Job_Identification" */
    IF EXISTS (SELECT * FROM deleted,Job
      WHERE
        /* %JoinFKPK(deleted,Job," = "," AND") */
        deleted.Job_Identification = Job.Job_Identification AND
        NOT EXISTS (
          SELECT * FROM Emp
          WHERE
            /* %JoinFKPK(Emp,Job," = "," AND") */
            Emp.Job_Identification = Job.Job_Identification
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Emp because Job exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Employee ON Emp FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Emp */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insEmp_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Emp  Reporting_Structure on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0003c0e9", PARENT_OWNER="", PARENT_TABLE="Emp"
    CHILD_OWNER="", CHILD_TABLE="Reporting_Structure"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Emp_Reporting_Structure", FK_COLUMNS="Reports_To" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Emp_Identification)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Reporting_Structure
      WHERE
        /*  %JoinFKPK(Reporting_Structure,deleted," = "," AND") */
        Reporting_Structure.Reports_To = deleted.Emp_Identification
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Emp because Reporting_Structure exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Emp  Reporting_Structure on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Emp"
    CHILD_OWNER="", CHILD_TABLE="Reporting_Structure"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Emp_Reporting_Structure", FK_COLUMNS="Manager" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Emp_Identification)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Reporting_Structure
      WHERE
        /*  %JoinFKPK(Reporting_Structure,deleted," = "," AND") */
        Reporting_Structure.Manager = deleted.Emp_Identification
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Emp because Reporting_Structure exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Job  Emp on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Job"
    CHILD_OWNER="", CHILD_TABLE="Emp"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Job_Emp", FK_COLUMNS="Job_Identification" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Job_Identification)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Job
        WHERE
          /* %JoinFKPK(inserted,Job) */
          inserted.Job_Identification = Job.Job_Identification
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Emp because Job does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Author ON Auth FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Auth */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Auth  BkAuth on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00011c80", PARENT_OWNER="", PARENT_TABLE="Auth"
    CHILD_OWNER="", CHILD_TABLE="BkAuth"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Auth_BkAuth", FK_COLUMNS="Auth_Identification" */
    IF EXISTS (
      SELECT * FROM deleted,BkAuth
      WHERE
        /*  %JoinFKPK(BkAuth,deleted," = "," AND") */
        BkAuth.Auth_Identification = deleted.Auth_Identification
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Auth because BkAuth exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Author ON Auth FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Auth */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAuth_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Auth  BkAuth on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00013edb", PARENT_OWNER="", PARENT_TABLE="Auth"
    CHILD_OWNER="", CHILD_TABLE="BkAuth"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Auth_BkAuth", FK_COLUMNS="Auth_Identification" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Auth_Identification)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BkAuth
      WHERE
        /*  %JoinFKPK(BkAuth,deleted," = "," AND") */
        BkAuth.Auth_Identification = deleted.Auth_Identification
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Auth because BkAuth exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Publisher ON Publshr FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Publshr */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Publshr  Publshr_Logo on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00021704", PARENT_OWNER="", PARENT_TABLE="Publshr"
    CHILD_OWNER="", CHILD_TABLE="Publshr_Logo"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Publshr_Publshr_Logo", FK_COLUMNS="Publshr_Identification" */
    IF EXISTS (
      SELECT * FROM deleted,Publshr_Logo
      WHERE
        /*  %JoinFKPK(Publshr_Logo,deleted," = "," AND") */
        Publshr_Logo.Publshr_Identification = deleted.Publshr_Identification
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Publshr because Publshr_Logo exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Publshr  Bk on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Publshr"
    CHILD_OWNER="", CHILD_TABLE="Bk"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Publshr_Bk", FK_COLUMNS="Publshr_Identification" */
    IF EXISTS (
      SELECT * FROM deleted,Bk
      WHERE
        /*  %JoinFKPK(Bk,deleted," = "," AND") */
        Bk.Publshr_Identification = deleted.Publshr_Identification
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Publshr because Bk exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Publisher ON Publshr FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Publshr */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPublshr_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Publshr  Publshr_Logo on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00025029", PARENT_OWNER="", PARENT_TABLE="Publshr"
    CHILD_OWNER="", CHILD_TABLE="Publshr_Logo"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Publshr_Publshr_Logo", FK_COLUMNS="Publshr_Identification" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Publshr_Identification)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Publshr_Logo
      WHERE
        /*  %JoinFKPK(Publshr_Logo,deleted," = "," AND") */
        Publshr_Logo.Publshr_Identification = deleted.Publshr_Identification
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Publshr because Publshr_Logo exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Publshr  Bk on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Publshr"
    CHILD_OWNER="", CHILD_TABLE="Bk"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Publshr_Bk", FK_COLUMNS="Publshr_Identification" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Publshr_Identification)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Bk
      WHERE
        /*  %JoinFKPK(Bk,deleted," = "," AND") */
        Bk.Publshr_Identification = deleted.Publshr_Identification
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Publshr because Bk exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Book ON Bk FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Bk */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Bk  BkAuth on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004230a", PARENT_OWNER="", PARENT_TABLE="Bk"
    CHILD_OWNER="", CHILD_TABLE="BkAuth"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Bk_BkAuth", FK_COLUMNS="Bk_Identification" */
    IF EXISTS (
      SELECT * FROM deleted,BkAuth
      WHERE
        /*  %JoinFKPK(BkAuth,deleted," = "," AND") */
        BkAuth.Bk_Identification = deleted.Bk_Identification
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Bk because BkAuth exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Bk  Bk_YTD_Sls on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Bk"
    CHILD_OWNER="", CHILD_TABLE="Bk_YTD_Sls"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Bk_Bk_YTD_Sls", FK_COLUMNS="Bk_Identification" */
    IF EXISTS (
      SELECT * FROM deleted,Bk_YTD_Sls
      WHERE
        /*  %JoinFKPK(Bk_YTD_Sls,deleted," = "," AND") */
        Bk_YTD_Sls.Bk_Identification = deleted.Bk_Identification
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Bk because Bk_YTD_Sls exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Bk  Ordr_itm on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Bk"
    CHILD_OWNER="", CHILD_TABLE="Ordr_itm"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Bk_Ordr_itm", FK_COLUMNS="Bk_Identification" */
    IF EXISTS (
      SELECT * FROM deleted,Ordr_itm
      WHERE
        /*  %JoinFKPK(Ordr_itm,deleted," = "," AND") */
        Ordr_itm.Bk_Identification = deleted.Bk_Identification
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Bk because Ordr_itm exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Publshr  Bk on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Publshr"
    CHILD_OWNER="", CHILD_TABLE="Bk"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Publshr_Bk", FK_COLUMNS="Publshr_Identification" */
    IF EXISTS (SELECT * FROM deleted,Publshr
      WHERE
        /* %JoinFKPK(deleted,Publshr," = "," AND") */
        deleted.Publshr_Identification = Publshr.Publshr_Identification AND
        NOT EXISTS (
          SELECT * FROM Bk
          WHERE
            /* %JoinFKPK(Bk,Publshr," = "," AND") */
            Bk.Publshr_Identification = Publshr.Publshr_Identification
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Bk because Publshr exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Book ON Bk FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Bk */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBk_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Bk  BkAuth on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0004d1b0", PARENT_OWNER="", PARENT_TABLE="Bk"
    CHILD_OWNER="", CHILD_TABLE="BkAuth"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Bk_BkAuth", FK_COLUMNS="Bk_Identification" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Bk_Identification)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BkAuth
      WHERE
        /*  %JoinFKPK(BkAuth,deleted," = "," AND") */
        BkAuth.Bk_Identification = deleted.Bk_Identification
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Bk because BkAuth exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Bk  Bk_YTD_Sls on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Bk"
    CHILD_OWNER="", CHILD_TABLE="Bk_YTD_Sls"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Bk_Bk_YTD_Sls", FK_COLUMNS="Bk_Identification" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Bk_Identification)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Bk_YTD_Sls
      WHERE
        /*  %JoinFKPK(Bk_YTD_Sls,deleted," = "," AND") */
        Bk_YTD_Sls.Bk_Identification = deleted.Bk_Identification
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Bk because Bk_YTD_Sls exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Bk  Ordr_itm on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Bk"
    CHILD_OWNER="", CHILD_TABLE="Ordr_itm"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Bk_Ordr_itm", FK_COLUMNS="Bk_Identification" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Bk_Identification)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Ordr_itm
      WHERE
        /*  %JoinFKPK(Ordr_itm,deleted," = "," AND") */
        Ordr_itm.Bk_Identification = deleted.Bk_Identification
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Bk because Ordr_itm exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Publshr  Bk on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Publshr"
    CHILD_OWNER="", CHILD_TABLE="Bk"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Publshr_Bk", FK_COLUMNS="Publshr_Identification" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Publshr_Identification)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Publshr
        WHERE
          /* %JoinFKPK(inserted,Publshr) */
          inserted.Publshr_Identification = Publshr.Publshr_Identification
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.Publshr_Identification IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Bk because Publshr does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Order_Item ON Ordr_itm FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Ordr_itm */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Ordr_itm  Ordr_Shipment on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0006d66a", PARENT_OWNER="", PARENT_TABLE="Ordr_itm"
    CHILD_OWNER="", CHILD_TABLE="Ordr_Shipment"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_itm_Ordr_Shipment", FK_COLUMNS="Ordr_Nbr""itm_Seq_Nbr" */
    IF EXISTS (
      SELECT * FROM deleted,Ordr_Shipment
      WHERE
        /*  %JoinFKPK(Ordr_Shipment,deleted," = "," AND") */
        Ordr_Shipment.Ordr_Nbr = deleted.Ordr_Nbr AND
        Ordr_Shipment.itm_Seq_Nbr = deleted.itm_Seq_Nbr
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Ordr_itm because Ordr_Shipment exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Ordr_itm  Bk_Retrun on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Ordr_itm"
    CHILD_OWNER="", CHILD_TABLE="Bk_Retrun"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_itm_Bk_Retrun", FK_COLUMNS="Ordr_Nbr""itm_Seq_Nbr" */
    IF EXISTS (
      SELECT * FROM deleted,Bk_Retrun
      WHERE
        /*  %JoinFKPK(Bk_Retrun,deleted," = "," AND") */
        Bk_Retrun.Ordr_Nbr = deleted.Ordr_Nbr AND
        Bk_Retrun.itm_Seq_Nbr = deleted.itm_Seq_Nbr
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Ordr_itm because Bk_Retrun exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Ordr_itm  Rylty_Hist on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Ordr_itm"
    CHILD_OWNER="", CHILD_TABLE="Rylty_Hist"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_itm_Rylty_Hist", FK_COLUMNS="Ordr_Nbr""itm_Seq_Nbr" */
    IF EXISTS (
      SELECT * FROM deleted,Rylty_Hist
      WHERE
        /*  %JoinFKPK(Rylty_Hist,deleted," = "," AND") */
        Rylty_Hist.Ordr_Nbr = deleted.Ordr_Nbr AND
        Rylty_Hist.itm_Seq_Nbr = deleted.itm_Seq_Nbr
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Ordr_itm because Rylty_Hist exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Bk  Ordr_itm on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Bk"
    CHILD_OWNER="", CHILD_TABLE="Ordr_itm"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Bk_Ordr_itm", FK_COLUMNS="Bk_Identification" */
    IF EXISTS (SELECT * FROM deleted,Bk
      WHERE
        /* %JoinFKPK(deleted,Bk," = "," AND") */
        deleted.Bk_Identification = Bk.Bk_Identification AND
        NOT EXISTS (
          SELECT * FROM Ordr_itm
          WHERE
            /* %JoinFKPK(Ordr_itm,Bk," = "," AND") */
            Ordr_itm.Bk_Identification = Bk.Bk_Identification
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Ordr_itm because Bk exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Disc  Ordr_itm on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Disc"
    CHILD_OWNER="", CHILD_TABLE="Ordr_itm"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Disc_Ordr_itm", FK_COLUMNS="Disc_Typ" */
    IF EXISTS (SELECT * FROM deleted,Disc
      WHERE
        /* %JoinFKPK(deleted,Disc," = "," AND") */
        deleted.Disc_Typ = Disc.Disc_Typ AND
        NOT EXISTS (
          SELECT * FROM Ordr_itm
          WHERE
            /* %JoinFKPK(Ordr_itm,Disc," = "," AND") */
            Ordr_itm.Disc_Typ = Disc.Disc_Typ
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Ordr_itm because Disc exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Purchase_Ordr  Ordr_itm on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Purchase_Ordr"
    CHILD_OWNER="", CHILD_TABLE="Ordr_itm"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchase_Ordr_Ordr_itm", FK_COLUMNS="Ordr_Nbr" */
    IF EXISTS (SELECT * FROM deleted,Purchase_Ordr
      WHERE
        /* %JoinFKPK(deleted,Purchase_Ordr," = "," AND") */
        deleted.Ordr_Nbr = Purchase_Ordr.Ordr_Nbr AND
        NOT EXISTS (
          SELECT * FROM Ordr_itm
          WHERE
            /* %JoinFKPK(Ordr_itm,Purchase_Ordr," = "," AND") */
            Ordr_itm.Ordr_Nbr = Purchase_Ordr.Ordr_Nbr
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Ordr_itm because Purchase_Ordr exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Order_Item ON Ordr_itm FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Ordr_itm */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insOrdr_Nbr integer, 
           @insitm_Seq_Nbr integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Ordr_itm  Ordr_Shipment on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0007e202", PARENT_OWNER="", PARENT_TABLE="Ordr_itm"
    CHILD_OWNER="", CHILD_TABLE="Ordr_Shipment"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_itm_Ordr_Shipment", FK_COLUMNS="Ordr_Nbr""itm_Seq_Nbr" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Ordr_Nbr) OR
    UPDATE(itm_Seq_Nbr)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Ordr_Shipment
      WHERE
        /*  %JoinFKPK(Ordr_Shipment,deleted," = "," AND") */
        Ordr_Shipment.Ordr_Nbr = deleted.Ordr_Nbr AND
        Ordr_Shipment.itm_Seq_Nbr = deleted.itm_Seq_Nbr
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Ordr_itm because Ordr_Shipment exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Ordr_itm  Bk_Retrun on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Ordr_itm"
    CHILD_OWNER="", CHILD_TABLE="Bk_Retrun"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_itm_Bk_Retrun", FK_COLUMNS="Ordr_Nbr""itm_Seq_Nbr" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Ordr_Nbr) OR
    UPDATE(itm_Seq_Nbr)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Bk_Retrun
      WHERE
        /*  %JoinFKPK(Bk_Retrun,deleted," = "," AND") */
        Bk_Retrun.Ordr_Nbr = deleted.Ordr_Nbr AND
        Bk_Retrun.itm_Seq_Nbr = deleted.itm_Seq_Nbr
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Ordr_itm because Bk_Retrun exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Ordr_itm  Rylty_Hist on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Ordr_itm"
    CHILD_OWNER="", CHILD_TABLE="Rylty_Hist"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_itm_Rylty_Hist", FK_COLUMNS="Ordr_Nbr""itm_Seq_Nbr" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Ordr_Nbr) OR
    UPDATE(itm_Seq_Nbr)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Rylty_Hist
      WHERE
        /*  %JoinFKPK(Rylty_Hist,deleted," = "," AND") */
        Rylty_Hist.Ordr_Nbr = deleted.Ordr_Nbr AND
        Rylty_Hist.itm_Seq_Nbr = deleted.itm_Seq_Nbr
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Ordr_itm because Rylty_Hist exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Bk  Ordr_itm on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Bk"
    CHILD_OWNER="", CHILD_TABLE="Ordr_itm"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Bk_Ordr_itm", FK_COLUMNS="Bk_Identification" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Bk_Identification)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Bk
        WHERE
          /* %JoinFKPK(inserted,Bk) */
          inserted.Bk_Identification = Bk.Bk_Identification
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Ordr_itm because Bk does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Disc  Ordr_itm on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Disc"
    CHILD_OWNER="", CHILD_TABLE="Ordr_itm"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Disc_Ordr_itm", FK_COLUMNS="Disc_Typ" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Disc_Typ)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Disc
        WHERE
          /* %JoinFKPK(inserted,Disc) */
          inserted.Disc_Typ = Disc.Disc_Typ
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.Disc_Typ IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Ordr_itm because Disc does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Purchase_Ordr  Ordr_itm on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Purchase_Ordr"
    CHILD_OWNER="", CHILD_TABLE="Ordr_itm"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchase_Ordr_Ordr_itm", FK_COLUMNS="Ordr_Nbr" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Ordr_Nbr)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Purchase_Ordr
        WHERE
          /* %JoinFKPK(inserted,Purchase_Ordr) */
          inserted.Ordr_Nbr = Purchase_Ordr.Ordr_Nbr
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Ordr_itm because Purchase_Ordr does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Royalty_Payment ON Rylty_Pmt FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Rylty_Pmt */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BkAuth  Rylty_Pmt on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002dd91", PARENT_OWNER="", PARENT_TABLE="BkAuth"
    CHILD_OWNER="", CHILD_TABLE="Rylty_Pmt"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BkAuth_Rylty_Pmt", FK_COLUMNS="Auth_Identification""Bk_Identification" */
    IF EXISTS (SELECT * FROM deleted,BkAuth
      WHERE
        /* %JoinFKPK(deleted,BkAuth," = "," AND") */
        deleted.Auth_Identification = BkAuth.Auth_Identification AND
        deleted.Bk_Identification = BkAuth.Bk_Identification AND
        NOT EXISTS (
          SELECT * FROM Rylty_Pmt
          WHERE
            /* %JoinFKPK(Rylty_Pmt,BkAuth," = "," AND") */
            Rylty_Pmt.Auth_Identification = BkAuth.Auth_Identification AND
            Rylty_Pmt.Bk_Identification = BkAuth.Bk_Identification
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Rylty_Pmt because BkAuth exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Rylty  Rylty_Pmt on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Rylty"
    CHILD_OWNER="", CHILD_TABLE="Rylty_Pmt"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Rylty_Rylty_Pmt", FK_COLUMNS="Rylty_Identification" */
    IF EXISTS (SELECT * FROM deleted,Rylty
      WHERE
        /* %JoinFKPK(deleted,Rylty," = "," AND") */
        deleted.Rylty_Identification = Rylty.Rylty_Identification AND
        NOT EXISTS (
          SELECT * FROM Rylty_Pmt
          WHERE
            /* %JoinFKPK(Rylty_Pmt,Rylty," = "," AND") */
            Rylty_Pmt.Rylty_Identification = Rylty.Rylty_Identification
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Rylty_Pmt because Rylty exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Royalty_Payment ON Rylty_Pmt FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Rylty_Pmt */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAuth_Identification id, 
           @insBk_Identification id, 
           @insRylty_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BkAuth  Rylty_Pmt on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00030012", PARENT_OWNER="", PARENT_TABLE="BkAuth"
    CHILD_OWNER="", CHILD_TABLE="Rylty_Pmt"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BkAuth_Rylty_Pmt", FK_COLUMNS="Auth_Identification""Bk_Identification" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Auth_Identification) OR
    UPDATE(Bk_Identification)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BkAuth
        WHERE
          /* %JoinFKPK(inserted,BkAuth) */
          inserted.Auth_Identification = BkAuth.Auth_Identification and
          inserted.Bk_Identification = BkAuth.Bk_Identification
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Rylty_Pmt because BkAuth does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Rylty  Rylty_Pmt on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Rylty"
    CHILD_OWNER="", CHILD_TABLE="Rylty_Pmt"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Rylty_Rylty_Pmt", FK_COLUMNS="Rylty_Identification" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Rylty_Identification)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Rylty
        WHERE
          /* %JoinFKPK(inserted,Rylty) */
          inserted.Rylty_Identification = Rylty.Rylty_Identification
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Rylty_Pmt because Rylty does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Book_YTD_Sales ON Bk_YTD_Sls FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Bk_YTD_Sls */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Bk  Bk_YTD_Sls on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001588f", PARENT_OWNER="", PARENT_TABLE="Bk"
    CHILD_OWNER="", CHILD_TABLE="Bk_YTD_Sls"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Bk_Bk_YTD_Sls", FK_COLUMNS="Bk_Identification" */
    IF EXISTS (SELECT * FROM deleted,Bk
      WHERE
        /* %JoinFKPK(deleted,Bk," = "," AND") */
        deleted.Bk_Identification = Bk.Bk_Identification AND
        NOT EXISTS (
          SELECT * FROM Bk_YTD_Sls
          WHERE
            /* %JoinFKPK(Bk_YTD_Sls,Bk," = "," AND") */
            Bk_YTD_Sls.Bk_Identification = Bk.Bk_Identification
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Bk_YTD_Sls because Bk exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Book_YTD_Sales ON Bk_YTD_Sls FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Bk_YTD_Sls */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBk_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Bk  Bk_YTD_Sls on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001697c", PARENT_OWNER="", PARENT_TABLE="Bk"
    CHILD_OWNER="", CHILD_TABLE="Bk_YTD_Sls"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Bk_Bk_YTD_Sls", FK_COLUMNS="Bk_Identification" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Bk_Identification)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Bk
        WHERE
          /* %JoinFKPK(inserted,Bk) */
          inserted.Bk_Identification = Bk.Bk_Identification
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Bk_YTD_Sls because Bk does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Royalty_History ON Rylty_Hist FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Rylty_Hist */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Ordr_itm  Rylty_Hist on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00018bae", PARENT_OWNER="", PARENT_TABLE="Ordr_itm"
    CHILD_OWNER="", CHILD_TABLE="Rylty_Hist"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_itm_Rylty_Hist", FK_COLUMNS="Ordr_Nbr""itm_Seq_Nbr" */
    IF EXISTS (SELECT * FROM deleted,Ordr_itm
      WHERE
        /* %JoinFKPK(deleted,Ordr_itm," = "," AND") */
        deleted.Ordr_Nbr = Ordr_itm.Ordr_Nbr AND
        deleted.itm_Seq_Nbr = Ordr_itm.itm_Seq_Nbr AND
        NOT EXISTS (
          SELECT * FROM Rylty_Hist
          WHERE
            /* %JoinFKPK(Rylty_Hist,Ordr_itm," = "," AND") */
            Rylty_Hist.Ordr_Nbr = Ordr_itm.Ordr_Nbr AND
            Rylty_Hist.itm_Seq_Nbr = Ordr_itm.itm_Seq_Nbr
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Rylty_Hist because Ordr_itm exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Royalty_History ON Rylty_Hist FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Rylty_Hist */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insRylty_Hist_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Ordr_itm  Rylty_Hist on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001cf41", PARENT_OWNER="", PARENT_TABLE="Ordr_itm"
    CHILD_OWNER="", CHILD_TABLE="Rylty_Hist"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_itm_Rylty_Hist", FK_COLUMNS="Ordr_Nbr""itm_Seq_Nbr" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Ordr_Nbr) OR
    UPDATE(itm_Seq_Nbr)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Ordr_itm
        WHERE
          /* %JoinFKPK(inserted,Ordr_itm) */
          inserted.Ordr_Nbr = Ordr_itm.Ordr_Nbr and
          inserted.itm_Seq_Nbr = Ordr_itm.itm_Seq_Nbr
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.Ordr_Nbr IS NULL AND
      inserted.itm_Seq_Nbr IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Rylty_Hist because Ordr_itm does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Reporting_Structure ON Reporting_Structure FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Reporting_Structure */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Emp  Reporting_Structure on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002a349", PARENT_OWNER="", PARENT_TABLE="Emp"
    CHILD_OWNER="", CHILD_TABLE="Reporting_Structure"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Emp_Reporting_Structure", FK_COLUMNS="Reports_To" */
    IF EXISTS (SELECT * FROM deleted,Emp
      WHERE
        /* %JoinFKPK(deleted,Emp," = "," AND") */
        deleted.Reports_To = Emp.Emp_Identification AND
        NOT EXISTS (
          SELECT * FROM Reporting_Structure
          WHERE
            /* %JoinFKPK(Reporting_Structure,Emp," = "," AND") */
            Reporting_Structure.Reports_To = Emp.Emp_Identification
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Reporting_Structure because Emp exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Emp  Reporting_Structure on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Emp"
    CHILD_OWNER="", CHILD_TABLE="Reporting_Structure"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Emp_Reporting_Structure", FK_COLUMNS="Manager" */
    IF EXISTS (SELECT * FROM deleted,Emp
      WHERE
        /* %JoinFKPK(deleted,Emp," = "," AND") */
        deleted.Manager = Emp.Emp_Identification AND
        NOT EXISTS (
          SELECT * FROM Reporting_Structure
          WHERE
            /* %JoinFKPK(Reporting_Structure,Emp," = "," AND") */
            Reporting_Structure.Manager = Emp.Emp_Identification
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Reporting_Structure because Emp exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Reporting_Structure ON Reporting_Structure FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Reporting_Structure */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insManager id, 
           @insReports_To id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Emp  Reporting_Structure on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0002c416", PARENT_OWNER="", PARENT_TABLE="Emp"
    CHILD_OWNER="", CHILD_TABLE="Reporting_Structure"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Emp_Reporting_Structure", FK_COLUMNS="Reports_To" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Reports_To)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Emp
        WHERE
          /* %JoinFKPK(inserted,Emp) */
          inserted.Reports_To = Emp.Emp_Identification
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Reporting_Structure because Emp does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Emp  Reporting_Structure on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Emp"
    CHILD_OWNER="", CHILD_TABLE="Reporting_Structure"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Emp_Reporting_Structure", FK_COLUMNS="Manager" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Manager)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Emp
        WHERE
          /* %JoinFKPK(inserted,Emp) */
          inserted.Manager = Emp.Emp_Identification
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Reporting_Structure because Emp does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Customer ON Cust FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Cust */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Cust  Purchase_Ordr on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000254ca", PARENT_OWNER="", PARENT_TABLE="Cust"
    CHILD_OWNER="", CHILD_TABLE="Purchase_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Cust_Purchase_Ordr", FK_COLUMNS="Cust_Identification""demo_id" */
    IF EXISTS (
      SELECT * FROM deleted,Purchase_Ordr
      WHERE
        /*  %JoinFKPK(Purchase_Ordr,deleted," = "," AND") */
        Purchase_Ordr.Cust_Identification = deleted.Cust_Identification AND
        Purchase_Ordr.demo_id = deleted.demo_id
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Cust because Purchase_Ordr exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* demo  Cust on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="demo"
    CHILD_OWNER="", CHILD_TABLE="Cust"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_demo_Cust", FK_COLUMNS="demo_id" */
    IF EXISTS (SELECT * FROM deleted,demo
      WHERE
        /* %JoinFKPK(deleted,demo," = "," AND") */
        deleted.demo_id = demo.demo_id AND
        NOT EXISTS (
          SELECT * FROM Cust
          WHERE
            /* %JoinFKPK(Cust,demo," = "," AND") */
            Cust.demo_id = demo.demo_id
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Cust because demo exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Customer ON Cust FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Cust */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCust_Identification id, 
           @insdemo_id char(18),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Cust  Purchase_Ordr on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002b0f4", PARENT_OWNER="", PARENT_TABLE="Cust"
    CHILD_OWNER="", CHILD_TABLE="Purchase_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Cust_Purchase_Ordr", FK_COLUMNS="Cust_Identification""demo_id" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Cust_Identification) OR
    UPDATE(demo_id)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchase_Ordr
      WHERE
        /*  %JoinFKPK(Purchase_Ordr,deleted," = "," AND") */
        Purchase_Ordr.Cust_Identification = deleted.Cust_Identification AND
        Purchase_Ordr.demo_id = deleted.demo_id
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Cust because Purchase_Ordr exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* demo  Cust on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="demo"
    CHILD_OWNER="", CHILD_TABLE="Cust"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_demo_Cust", FK_COLUMNS="demo_id" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(demo_id)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,demo
        WHERE
          /* %JoinFKPK(inserted,demo) */
          inserted.demo_id = demo.demo_id
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Cust because demo does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Book_Retrun ON Bk_Retrun FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Bk_Retrun */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Ordr_itm  Bk_Retrun on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00017edf", PARENT_OWNER="", PARENT_TABLE="Ordr_itm"
    CHILD_OWNER="", CHILD_TABLE="Bk_Retrun"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_itm_Bk_Retrun", FK_COLUMNS="Ordr_Nbr""itm_Seq_Nbr" */
    IF EXISTS (SELECT * FROM deleted,Ordr_itm
      WHERE
        /* %JoinFKPK(deleted,Ordr_itm," = "," AND") */
        deleted.Ordr_Nbr = Ordr_itm.Ordr_Nbr AND
        deleted.itm_Seq_Nbr = Ordr_itm.itm_Seq_Nbr AND
        NOT EXISTS (
          SELECT * FROM Bk_Retrun
          WHERE
            /* %JoinFKPK(Bk_Retrun,Ordr_itm," = "," AND") */
            Bk_Retrun.Ordr_Nbr = Ordr_itm.Ordr_Nbr AND
            Bk_Retrun.itm_Seq_Nbr = Ordr_itm.itm_Seq_Nbr
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Bk_Retrun because Ordr_itm exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Book_Retrun ON Bk_Retrun FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Bk_Retrun */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBk_Return_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Ordr_itm  Bk_Retrun on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001cc73", PARENT_OWNER="", PARENT_TABLE="Ordr_itm"
    CHILD_OWNER="", CHILD_TABLE="Bk_Retrun"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_itm_Bk_Retrun", FK_COLUMNS="Ordr_Nbr""itm_Seq_Nbr" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Ordr_Nbr) OR
    UPDATE(itm_Seq_Nbr)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Ordr_itm
        WHERE
          /* %JoinFKPK(inserted,Ordr_itm) */
          inserted.Ordr_Nbr = Ordr_itm.Ordr_Nbr and
          inserted.itm_Seq_Nbr = Ordr_itm.itm_Seq_Nbr
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.Ordr_Nbr IS NULL AND
      inserted.itm_Seq_Nbr IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Bk_Retrun because Ordr_itm does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Credit_Card ON Crd_Card FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Crd_Card */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Crd_Card  Crd_Chk on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00010793", PARENT_OWNER="", PARENT_TABLE="Crd_Card"
    CHILD_OWNER="", CHILD_TABLE="Crd_Chk"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Crd_Card_Crd_Chk", FK_COLUMNS="Pmt_Nbr" */
    IF EXISTS (
      SELECT * FROM deleted,Crd_Chk
      WHERE
        /*  %JoinFKPK(Crd_Chk,deleted," = "," AND") */
        Crd_Chk.Pmt_Nbr = deleted.Pmt_Nbr
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Crd_Card because Crd_Chk exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Credit_Card ON Crd_Card FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Crd_Card */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPmt_Nbr integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Crd_Card  Crd_Chk on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00012b46", PARENT_OWNER="", PARENT_TABLE="Crd_Card"
    CHILD_OWNER="", CHILD_TABLE="Crd_Chk"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Crd_Card_Crd_Chk", FK_COLUMNS="Pmt_Nbr" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Pmt_Nbr)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Crd_Chk
      WHERE
        /*  %JoinFKPK(Crd_Chk,deleted," = "," AND") */
        Crd_Chk.Pmt_Nbr = deleted.Pmt_Nbr
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Crd_Card because Crd_Chk exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Payment ON Pmt FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Pmt */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Pmt  Personal_Chk on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00025d7c", PARENT_OWNER="", PARENT_TABLE="Pmt"
    CHILD_OWNER="", CHILD_TABLE="Personal_Chk"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Pmt_Personal_Chk", FK_COLUMNS="Pmt_Nbr" */
    DELETE Personal_Chk
      FROM Personal_Chk,deleted
      WHERE
        /*  %JoinFKPK(Personal_Chk,deleted," = "," AND") */
        Personal_Chk.Pmt_Nbr = deleted.Pmt_Nbr

    /* erwin Builtin Trigger */
    /* Pmt  Money_Ordr on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Pmt"
    CHILD_OWNER="", CHILD_TABLE="Money_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Pmt_Money_Ordr", FK_COLUMNS="Pmt_Nbr" */
    DELETE Money_Ordr
      FROM Money_Ordr,deleted
      WHERE
        /*  %JoinFKPK(Money_Ordr,deleted," = "," AND") */
        Money_Ordr.Pmt_Nbr = deleted.Pmt_Nbr

    /* erwin Builtin Trigger */
    /* Pmt  Crd_Card on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Pmt"
    CHILD_OWNER="", CHILD_TABLE="Crd_Card"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Pmt_Crd_Card", FK_COLUMNS="Pmt_Nbr" */
    DELETE Crd_Card
      FROM Crd_Card,deleted
      WHERE
        /*  %JoinFKPK(Crd_Card,deleted," = "," AND") */
        Crd_Card.Pmt_Nbr = deleted.Pmt_Nbr


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Payment ON Pmt FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Pmt */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPmt_Nbr integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Pmt  Personal_Chk on parent update cascade */
  /* ERWIN_RELATION:CHECKSUM="000417ee", PARENT_OWNER="", PARENT_TABLE="Pmt"
    CHILD_OWNER="", CHILD_TABLE="Personal_Chk"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Pmt_Personal_Chk", FK_COLUMNS="Pmt_Nbr" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Pmt_Nbr)
  BEGIN
    IF @numrows = 1
    BEGIN
      SELECT @insPmt_Nbr = inserted.Pmt_Nbr
        FROM inserted
      UPDATE Personal_Chk
      SET
        /*  %JoinFKPK(Personal_Chk,@ins," = ",",") */
        Personal_Chk.Pmt_Nbr = @insPmt_Nbr
      FROM Personal_Chk,inserted,deleted
      WHERE
        /*  %JoinFKPK(Personal_Chk,deleted," = "," AND") */
        Personal_Chk.Pmt_Nbr = deleted.Pmt_Nbr
    END
    ELSE
    BEGIN
      SELECT @errno = 30006,
             @errmsg = 'Cannot cascade Pmt update because more than one row has been affected.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Pmt  Money_Ordr on parent update cascade */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Pmt"
    CHILD_OWNER="", CHILD_TABLE="Money_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Pmt_Money_Ordr", FK_COLUMNS="Pmt_Nbr" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Pmt_Nbr)
  BEGIN
    IF @numrows = 1
    BEGIN
      SELECT @insPmt_Nbr = inserted.Pmt_Nbr
        FROM inserted
      UPDATE Money_Ordr
      SET
        /*  %JoinFKPK(Money_Ordr,@ins," = ",",") */
        Money_Ordr.Pmt_Nbr = @insPmt_Nbr
      FROM Money_Ordr,inserted,deleted
      WHERE
        /*  %JoinFKPK(Money_Ordr,deleted," = "," AND") */
        Money_Ordr.Pmt_Nbr = deleted.Pmt_Nbr
    END
    ELSE
    BEGIN
      SELECT @errno = 30006,
             @errmsg = 'Cannot cascade Pmt update because more than one row has been affected.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Pmt  Crd_Card on parent update cascade */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Pmt"
    CHILD_OWNER="", CHILD_TABLE="Crd_Card"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Pmt_Crd_Card", FK_COLUMNS="Pmt_Nbr" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Pmt_Nbr)
  BEGIN
    IF @numrows = 1
    BEGIN
      SELECT @insPmt_Nbr = inserted.Pmt_Nbr
        FROM inserted
      UPDATE Crd_Card
      SET
        /*  %JoinFKPK(Crd_Card,@ins," = ",",") */
        Crd_Card.Pmt_Nbr = @insPmt_Nbr
      FROM Crd_Card,inserted,deleted
      WHERE
        /*  %JoinFKPK(Crd_Card,deleted," = "," AND") */
        Crd_Card.Pmt_Nbr = deleted.Pmt_Nbr
    END
    ELSE
    BEGIN
      SELECT @errno = 30006,
             @errmsg = 'Cannot cascade Pmt update because more than one row has been affected.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Region ON Rgn FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Rgn */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Rgn  Stor_Nam on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001178a", PARENT_OWNER="", PARENT_TABLE="Rgn"
    CHILD_OWNER="", CHILD_TABLE="Stor_Nam"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Rgn_Stor_Nam", FK_COLUMNS="Rgn_Identification" */
    IF EXISTS (
      SELECT * FROM deleted,Stor_Nam
      WHERE
        /*  %JoinFKPK(Stor_Nam,deleted," = "," AND") */
        Stor_Nam.Rgn_Identification = deleted.Rgn_Identification
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Rgn because Stor_Nam exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Region ON Rgn FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Rgn */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insRgn_Identification id,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Rgn  Stor_Nam on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00013ace", PARENT_OWNER="", PARENT_TABLE="Rgn"
    CHILD_OWNER="", CHILD_TABLE="Stor_Nam"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Rgn_Stor_Nam", FK_COLUMNS="Rgn_Identification" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Rgn_Identification)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Stor_Nam
      WHERE
        /*  %JoinFKPK(Stor_Nam,deleted," = "," AND") */
        Stor_Nam.Rgn_Identification = deleted.Rgn_Identification
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Rgn because Stor_Nam exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Order_Shipment ON Ordr_Shipment FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Ordr_Shipment */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Ordr_Shipment  Back_Ordr on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002c8e3", PARENT_OWNER="", PARENT_TABLE="Ordr_Shipment"
    CHILD_OWNER="", CHILD_TABLE="Back_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_Shipment_Back_Ordr", FK_COLUMNS="Ordr_Shipment_Identifier""Ordr_Nbr""itm_Seq_Nbr" */
    IF EXISTS (
      SELECT * FROM deleted,Back_Ordr
      WHERE
        /*  %JoinFKPK(Back_Ordr,deleted," = "," AND") */
        Back_Ordr.Ordr_Shipment_Identifier = deleted.Ordr_Shipment_Identifier AND
        Back_Ordr.Ordr_Nbr = deleted.Ordr_Nbr AND
        Back_Ordr.itm_Seq_Nbr = deleted.itm_Seq_Nbr
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Ordr_Shipment because Back_Ordr exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Ordr_itm  Ordr_Shipment on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Ordr_itm"
    CHILD_OWNER="", CHILD_TABLE="Ordr_Shipment"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_itm_Ordr_Shipment", FK_COLUMNS="Ordr_Nbr""itm_Seq_Nbr" */
    IF EXISTS (SELECT * FROM deleted,Ordr_itm
      WHERE
        /* %JoinFKPK(deleted,Ordr_itm," = "," AND") */
        deleted.Ordr_Nbr = Ordr_itm.Ordr_Nbr AND
        deleted.itm_Seq_Nbr = Ordr_itm.itm_Seq_Nbr AND
        NOT EXISTS (
          SELECT * FROM Ordr_Shipment
          WHERE
            /* %JoinFKPK(Ordr_Shipment,Ordr_itm," = "," AND") */
            Ordr_Shipment.Ordr_Nbr = Ordr_itm.Ordr_Nbr AND
            Ordr_Shipment.itm_Seq_Nbr = Ordr_itm.itm_Seq_Nbr
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Ordr_Shipment because Ordr_itm exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Order_Shipment ON Ordr_Shipment FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Ordr_Shipment */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insOrdr_Shipment_Identifier id, 
           @insOrdr_Nbr integer, 
           @insitm_Seq_Nbr integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Ordr_Shipment  Back_Ordr on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00032266", PARENT_OWNER="", PARENT_TABLE="Ordr_Shipment"
    CHILD_OWNER="", CHILD_TABLE="Back_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_Shipment_Back_Ordr", FK_COLUMNS="Ordr_Shipment_Identifier""Ordr_Nbr""itm_Seq_Nbr" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Ordr_Shipment_Identifier) OR
    UPDATE(Ordr_Nbr) OR
    UPDATE(itm_Seq_Nbr)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Back_Ordr
      WHERE
        /*  %JoinFKPK(Back_Ordr,deleted," = "," AND") */
        Back_Ordr.Ordr_Shipment_Identifier = deleted.Ordr_Shipment_Identifier AND
        Back_Ordr.Ordr_Nbr = deleted.Ordr_Nbr AND
        Back_Ordr.itm_Seq_Nbr = deleted.itm_Seq_Nbr
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Ordr_Shipment because Back_Ordr exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Ordr_itm  Ordr_Shipment on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Ordr_itm"
    CHILD_OWNER="", CHILD_TABLE="Ordr_Shipment"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_itm_Ordr_Shipment", FK_COLUMNS="Ordr_Nbr""itm_Seq_Nbr" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Ordr_Nbr) OR
    UPDATE(itm_Seq_Nbr)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Ordr_itm
        WHERE
          /* %JoinFKPK(inserted,Ordr_itm) */
          inserted.Ordr_Nbr = Ordr_itm.Ordr_Nbr and
          inserted.itm_Seq_Nbr = Ordr_itm.itm_Seq_Nbr
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Ordr_Shipment because Ordr_itm does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Back_Order ON Back_Ordr FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Back_Ordr */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Ordr_Shipment  Back_Ordr on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001f67d", PARENT_OWNER="", PARENT_TABLE="Ordr_Shipment"
    CHILD_OWNER="", CHILD_TABLE="Back_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_Shipment_Back_Ordr", FK_COLUMNS="Ordr_Shipment_Identifier""Ordr_Nbr""itm_Seq_Nbr" */
    IF EXISTS (SELECT * FROM deleted,Ordr_Shipment
      WHERE
        /* %JoinFKPK(deleted,Ordr_Shipment," = "," AND") */
        deleted.Ordr_Shipment_Identifier = Ordr_Shipment.Ordr_Shipment_Identifier AND
        deleted.Ordr_Nbr = Ordr_Shipment.Ordr_Nbr AND
        deleted.itm_Seq_Nbr = Ordr_Shipment.itm_Seq_Nbr AND
        NOT EXISTS (
          SELECT * FROM Back_Ordr
          WHERE
            /* %JoinFKPK(Back_Ordr,Ordr_Shipment," = "," AND") */
            Back_Ordr.Ordr_Shipment_Identifier = Ordr_Shipment.Ordr_Shipment_Identifier AND
            Back_Ordr.Ordr_Nbr = Ordr_Shipment.Ordr_Nbr AND
            Back_Ordr.itm_Seq_Nbr = Ordr_Shipment.itm_Seq_Nbr
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Back_Ordr because Ordr_Shipment exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Back_Order ON Back_Ordr FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Back_Ordr */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insOrdr_Shipment_Identifier id, 
           @insOrdr_Nbr integer, 
           @insitm_Seq_Nbr integer,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Ordr_Shipment  Back_Ordr on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001f073", PARENT_OWNER="", PARENT_TABLE="Ordr_Shipment"
    CHILD_OWNER="", CHILD_TABLE="Back_Ordr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Ordr_Shipment_Back_Ordr", FK_COLUMNS="Ordr_Shipment_Identifier""Ordr_Nbr""itm_Seq_Nbr" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Ordr_Shipment_Identifier) OR
    UPDATE(Ordr_Nbr) OR
    UPDATE(itm_Seq_Nbr)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Ordr_Shipment
        WHERE
          /* %JoinFKPK(inserted,Ordr_Shipment) */
          inserted.Ordr_Shipment_Identifier = Ordr_Shipment.Ordr_Shipment_Identifier and
          inserted.Ordr_Nbr = Ordr_Shipment.Ordr_Nbr and
          inserted.itm_Seq_Nbr = Ordr_Shipment.itm_Seq_Nbr
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Back_Ordr because Ordr_Shipment does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Credit_Check ON Crd_Chk FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Crd_Chk */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Crd_Card  Crd_Chk on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00014501", PARENT_OWNER="", PARENT_TABLE="Crd_Card"
    CHILD_OWNER="", CHILD_TABLE="Crd_Chk"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Crd_Card_Crd_Chk", FK_COLUMNS="Pmt_Nbr" */
    IF EXISTS (SELECT * FROM deleted,Crd_Card
      WHERE
        /* %JoinFKPK(deleted,Crd_Card," = "," AND") */
        deleted.Pmt_Nbr = Crd_Card.Pmt_Nbr AND
        NOT EXISTS (
          SELECT * FROM Crd_Chk
          WHERE
            /* %JoinFKPK(Crd_Chk,Crd_Card," = "," AND") */
            Crd_Chk.Pmt_Nbr = Crd_Card.Pmt_Nbr
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Crd_Chk because Crd_Card exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Credit_Check ON Crd_Chk FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Crd_Chk */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCrd_Chk_Event CHAR(12),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Crd_Card  Crd_Chk on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00016bed", PARENT_OWNER="", PARENT_TABLE="Crd_Card"
    CHILD_OWNER="", CHILD_TABLE="Crd_Chk"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Crd_Card_Crd_Chk", FK_COLUMNS="Pmt_Nbr" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Pmt_Nbr)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Crd_Card
        WHERE
          /* %JoinFKPK(inserted,Crd_Card) */
          inserted.Pmt_Nbr = Crd_Card.Pmt_Nbr
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Crd_Chk because Crd_Card does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_demo ON demo FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on demo */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* demo  Cust on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000106eb", PARENT_OWNER="", PARENT_TABLE="demo"
    CHILD_OWNER="", CHILD_TABLE="Cust"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_demo_Cust", FK_COLUMNS="demo_id" */
    IF EXISTS (
      SELECT * FROM deleted,Cust
      WHERE
        /*  %JoinFKPK(Cust,deleted," = "," AND") */
        Cust.demo_id = deleted.demo_id
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete demo because Cust exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_demo ON demo FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on demo */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insdemo_id char(18),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* demo  Cust on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00011ac1", PARENT_OWNER="", PARENT_TABLE="demo"
    CHILD_OWNER="", CHILD_TABLE="Cust"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_demo_Cust", FK_COLUMNS="demo_id" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(demo_id)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Cust
      WHERE
        /*  %JoinFKPK(Cust,deleted," = "," AND") */
        Cust.demo_id = deleted.demo_id
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update demo because Cust exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go



